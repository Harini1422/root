[ {
  "tasks" : [ {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "grid_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : true,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "stop",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "rules" : { },
    "cleanUpFlowDetails" : { },
    "subFlowDetails" : [ ],
    "associatedRollbackWorkOrderDetail" : null,
    "_id" : null,
    "task_id" : "workflow_stop_1",
    "task_name" : "Stop",
    "task_type" : "stop",
    "task_category" : "stop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "decision_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "Failed" : [ {
        "taskId" : "join_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "join",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "Profile_Check" : [ {
        "taskId" : "Certificate_OOB_Profile_Association_Check_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "flow",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "orphaned_certs",
      "value" : "<%orphaned_certs%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "If",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "rule" : {
      "not" : false,
      "condition" : "AND",
      "rules" : [ {
        "operator" : "==",
        "value" : "<%orphaned_certs%>",
        "comparedValue" : "Yes"
      } ]
    },
    "_id" : null,
    "task_id" : "decision_1",
    "task_name" : "If",
    "task_type" : "decision",
    "task_category" : "decision",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "decision",
    "group_name" : "General",
    "viewable_type" : "custom",
    "rule_name" : "Profile_Check"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "decision_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      }, {
        "taskId" : "Certificate_OOB_VIP_Association_Check_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "decision_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "decision",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Join",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "flowIdsToJoin" : [ ],
    "_id" : null,
    "task_id" : "join_1",
    "task_name" : "Join",
    "task_type" : "join",
    "task_category" : "join",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "join",
    "group_name" : "General",
    "viewable_type" : "default"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "decision_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : null,
        "taskType" : "decision",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "startLoop_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "loop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "certsAssociated",
      "value" : "<%certsAssociated%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "number_of_days_to_expire",
      "value" : "<%number_of_days_to_expire%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "date_range_or_date",
      "value" : "<%date_range_or_date%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_9",
    "task_name" : "Group certificates by expiry days",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport json\n\nsys.path.insert(0, AVX::DEPENDENCIES)\nsys.path.insert(0, AVX::HELPER)\n\nfrom datetime import datetime\nfrom collections import defaultdict\n\nfalse = False\ntrue = True\nnull = None\n\ncurrent_datetime = datetime.now().strftime (\"%Y/%m/%d/%H/%M/%S\")\ncurrent_datetime = (datetime.strptime(current_datetime, \"%Y/%m/%d/%H/%M/%S\"))\n\ncert_grouping_by_days = defaultdict(list)\ndays_list = []\n\ncert_objects = '<%certsAssociated%>'\ndate_range_or_date = '<%date_range_or_date%>'\n\nno_of_days = '<%number_of_days_to_expire%>'\ndays_list = no_of_days.split(',')\ndays_list.sort()\n\nfor cert in cert_objects:\n    valid_until = cert['validTo']\n    valid_until = datetime.fromtimestamp(int(valid_until)/1000).strftime('%d-%m-%Y %H-%M-%S')\n    valid_until = (datetime.strptime(valid_until, '%d-%m-%Y %H-%M-%S'))\n    days_left_to_expire = (valid_until-current_datetime).days\n    start = 0\n    for day in days_list:\n        if days_left_to_expire > start and days_left_to_expire <= int(day):\n            cert_grouping_by_days[int(day)].append(cert)\n        start = int(day)\n\nAVX::LOG(\"cert_grouping_by_days\"+str(cert_grouping_by_days))\nAVX::LOG(\"cert_grouping_by_days\"+str(cert_grouping_by_days.keys()))\nAVX::OUTPUT({\"days_list\":days_list,\"cert_grouping_by_days\":cert_grouping_by_days})",
    "http_method" : "POST",
    "action_id" : "run-script"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_9",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : null,
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "script_10",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : null,
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "days_list",
      "value" : "<%days_list%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "For",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "loopVariables" : {
      "day_iter" : "<%days_list%>"
    },
    "rule" : {
      "not" : false,
      "condition" : "AND",
      "rules" : [ {
        "operator" : "==",
        "value" : "",
        "comparedValue" : ""
      } ]
    },
    "continueOnFailure" : false,
    "joinTaskToReset" : [ ],
    "loopVariableInterceptor" : false,
    "flowIdsToEndLoop" : [ ],
    "_id" : null,
    "task_id" : "startLoop_1",
    "task_name" : "Intializing Certificate Grouping",
    "task_type" : "loop",
    "task_category" : "startLoop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "loop",
    "group_name" : "General",
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "success" : [ {
        "taskId" : "join_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "join",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "incoming" : [ {
        "taskId" : "endLoop_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "For",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "loopVariables" : null,
    "rule" : null,
    "continueOnFailure" : false,
    "joinTaskToReset" : [ ],
    "loopVariableInterceptor" : false,
    "flowIdsToEndLoop" : [ ],
    "_id" : null,
    "task_id" : "endLoop_1",
    "task_name" : "Intializing Certificate Grouping",
    "task_type" : "loop",
    "task_category" : "endLoop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "loop",
    "group_name" : "General",
    "viewable_type" : "default"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "startLoop_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "startLoop_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "loop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "check_csr_mail_group",
      "value" : "<%check_csr_mail_group%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "cert_grouping_by_days",
      "value" : "<%cert_grouping_by_days%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "selected_fields",
      "value" : "<%selected_fields%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "enter_email",
      "value" : "<%enter_email%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "day_iter",
      "value" : "<%day_iter%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_10",
    "task_name" : "Group certificates by email ids",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport json\nimport re\n\nsys.path.insert(0, AVX::DEPENDENCIES)\nsys.path.insert(0, AVX::HELPER)\n\nfrom collections import defaultdict\nfrom datetime import datetime\nfalse = False\ntrue = True\nnull = None\n\ncert_grouping_by_days = '<%cert_grouping_by_days%>'\n\nnotif_day = '<%days_list[<%day_iter%>]%>'\n\n\ncheck_csr_mail_group = '<%check_csr_mail_group%>'\n\nuser_provided_email = '<%enter_email%>'\n\nselected_fields = '<%selected_fields%>'\n\ncert_temp_list = []\n\nmapping = {\n    \"category\":\"Category\",\n    \"subjectOrganization\":\"Subject Organization\",\n    \"validFrom\":\"Valid From\",\n    \"keyUsage\":\"Key Usage\",\n    \"autoRenewDate\":\"Auto RenewDate\",\n    \"newConnectors\":\"New Connectors\",\n    \"subjectLocality\":\"Subject Locality\",\n    \"issuerOrganization\":\"Issuer Organization\",\n    \"validFor\":\"Valid For\",\n    \"issuerCountry\":\"Issuer Country\",\n    \"privatekeyAvaliable\":\"Privatekey Avaliable\",\n    \"extendedKeyUsage\":\"Extended Key Usage\",\n    \"issuerLocality\":\"Issuer Locality\",\n    \"basicConstraints\":\"Basic Constraints\",\n    \"subjectOrganizationUnit\":\"Subject Organization Unit\",\n    \"discoveredFileNames\":\"Discovered File Names\",\n    \"signatureHashAlgorithm\":\"Signature Hash Algorithm\",\n    \"mailAddress\":\"Mail Address\",\n    \"discoverySources\":\"Discovery Sources\",\n    \"subjectState\":\"Subject State\",\n    \"issuerOrganizationUnit\":\"Issuer Organization Unit\",\n    \"issuerState\":\"Issuer State\",\n    \"commonName\":\"Common Name\",\n    \"applications\":\"Applications\",\n    \"expiryStatus\":\"Expiry Status\",\n    \"type\":\"Type\",\n    \"validTo\":\"Valid To\",\n    \"authorityInfoAccess\":\"Authority Info Access\",\n    \"group\":\"Group\",\n    \"missingParamsForAutoRenew\":\"Missing Params For AutoRenew\",\n    \"issuerCommonName\":\"Issuer Common Name\",\n    \"version\":\"Version\",\n    \"authorityKeyIdentifier\":\"Authority Key Identifier\",\n    \"certificateAuthority\":\"Certificate Authority\",\n    \"complianceStatus\":\"Compliance Status\",\n    \"status\":\"Status\",\n    \"csrAvailable\":\"CSR Available\",\n    \"thumbPrint\":\"ThumbPrint\",\n    \"subjectAlternativeNames\":\"Subject Alternative Names\",\n    \"resourceId\":\"ResourceId\",\n    \"thumbprintAlgorithm\":\"Thumbprint Algorithm\",\n    \"serialNumber\":\"Serial Number\",\n    \"crlDistributionPoints\":\"Crl Distribution Points\",\n    \"signatureAlgorithm\":\"Signature Algorithm\",\n    \"subjectCountry\":\"Subject Country\",\n    \"keyAlgorithmAndSize\":\"Key Algorithm And Size\",\n    \"certificatePolicies\":\"Certificate Policies\",\n    \"associatedObjects\":\"Associated Profiles\",\n    \"suspendedCertificate\":\"Suspended Certificate\",\n    \"permission\":\"Permission\",\n    \"subjectKeyIdentifier\":\"Subject Key Identifier\"\n}\n\ntemp_dict = {}\n\ndef get_certs_with_email():\n    \n    email_regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n        \n    if notif_day in cert_grouping_by_days:\n        cert_list = cert_grouping_by_days[notif_day]\n        for cert in cert_list:\n            data = {}\n            email_data = {}\n            cert_attrib_email = ''\n            for field in selected_fields:\n                if field in cert:\n                    if field == 'validTo' or field == 'validFrom':\n                        data[mapping[field]] = datetime.fromtimestamp(int(cert[field])/1000).strftime('%d-%b-%Y')\n                    elif field == 'associatedObjects':\n                        assoc_objects = []\n                        for assoc_obj in cert[field]:\n                            if len(assoc_obj.split(\":\"))>2:\n                                assoc_objects.append(assoc_obj.split(\":\")[2])\n                            else:\n                                assoc_objects.append(assoc_obj)\n                        assoc_objects = ','.join(assoc_objects)\n                        \n                        data[mapping[field]] = assoc_objects\n                    else:\n                        data[mapping[field]] = str(cert[field])\n                else:\n                    if \"certAttributes\" in cert:\n                        if field in cert[\"certAttributes\"]:\n                            cert_attrib = cert[\"certAttributes\"][field]\n                            if re.search(email_regex, cert_attrib):\n                                cert_attrib_email = cert_attrib\n                                data[field] = cert_attrib\n                            else:\n                                data[field] = cert_attrib\n            if check_csr_mail_group==\"Yes\":\n                if \"mailAddress\" in cert and cert['mailAddress'] != '':\n                    email_data['mail'] = cert['mailAddress']+ \",\"+user_provided_email\n                    if cert_attrib_email:\n                        email_data['mail'] += \",\"+str(cert_attrib_email)\n                else:\n                    email_data['mail'] = user_provided_email\n                    if cert_attrib_email:\n                        email_data['mail'] += \",\"+str(cert_attrib_email)\n            else:\n                email_data['mail'] = user_provided_email\n                if cert_attrib_email:\n                        email_data['mail'] += \",\"+str(cert_attrib_email)\n            email_data['data'] = data\n            cert_temp_list.append(email_data)\n    else:\n        AVX::LOG(\"There are no certs expiring in \"+str(notif_day)+\" days.\")\n    \n\n\ndef group_cert_on_email():\n    temp_dict = defaultdict(list)\n    for cert_data in cert_temp_list:\n        temp_dict[cert_data['mail']].append(cert_data['data'])\n    return temp_dict\n\nif __name__ == '__main__':\n    AVX::LOG(\"cert_grouping_by_days\"+str(cert_grouping_by_days))\n\n    AVX::LOG(\"notif_day\"+str(notif_day))\n\n    get_certs_with_email()\n    email_list = []\n    \n    if len(cert_temp_list) != 0:\n        temp_dict = group_cert_on_email()\n        if temp_dict.keys():\n            email_list = list(temp_dict.keys())\n            \n\n    AVX::OUTPUT({\"email_list\":list(email_list),\"temp_dict\":temp_dict})",
    "http_method" : "POST",
    "action_id" : "run-script"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "expiry_type_check" : [ {
        "taskId" : "script_12",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "incoming" : [ {
        "taskId" : "join_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "Failed" : [ {
        "taskId" : "script_9",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : null,
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "date_range_or_date",
      "value" : "<%date_range_or_date%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "If",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "rule" : {
      "not" : false,
      "condition" : "AND",
      "rules" : [ {
        "operator" : "==",
        "value" : "<%date_range_or_date%>",
        "comparedValue" : "Date range"
      } ]
    },
    "_id" : null,
    "task_id" : "decision_2",
    "task_name" : "If",
    "task_type" : "decision",
    "task_category" : "decision",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "decision",
    "group_name" : "General",
    "viewable_type" : "custom",
    "rule_name" : "expiry_type_check"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "decision_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "startLoop_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "loop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "check_csr_mail_group",
      "value" : "<%check_csr_mail_group%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "certsAssociated",
      "value" : "<%certsAssociated%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "selected_fields",
      "value" : "<%selected_fields%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "enter_email",
      "value" : "<%enter_email%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_12",
    "task_name" : "Group by email for date range",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport json\nimport re\n\nsys.path.insert(0, AVX::DEPENDENCIES)\nsys.path.insert(0, AVX::HELPER)\n\nfrom collections import defaultdict\nfrom datetime import datetime\n\nfalse = False\ntrue = True\nnull = None\n\ncertsAssociated = '<%certsAssociated%>'\n\nuser_provided_email = '<%enter_email%>'\n\ncheck_csr_mail_group = '<%check_csr_mail_group%>'\nselected_fields = '<%selected_fields%>'\n\ncert_temp_list = []\n\nmapping = {\n    \"category\":\"Category\",\n    \"subjectOrganization\":\"Subject Organization\",\n    \"validFrom\":\"Valid From\",\n    \"keyUsage\":\"Key Usage\",\n    \"autoRenewDate\":\"Auto RenewDate\",\n    \"newConnectors\":\"New Connectors\",\n    \"subjectLocality\":\"Subject Locality\",\n    \"issuerOrganization\":\"Issuer Organization\",\n    \"validFor\":\"Valid For\",\n    \"issuerCountry\":\"Issuer Country\",\n    \"privatekeyAvaliable\":\"Privatekey Avaliable\",\n    \"extendedKeyUsage\":\"Extended Key Usage\",\n    \"issuerLocality\":\"Issuer Locality\",\n    \"basicConstraints\":\"Basic Constraints\",\n    \"subjectOrganizationUnit\":\"Subject Organization Unit\",\n    \"discoveredFileNames\":\"Discovered File Names\",\n    \"signatureHashAlgorithm\":\"Signature Hash Algorithm\",\n    \"mailAddress\":\"Mail Address\",\n    \"discoverySources\":\"Discovery Sources\",\n    \"subjectState\":\"Subject State\",\n    \"issuerOrganizationUnit\":\"Issuer Organization Unit\",\n    \"issuerState\":\"Issuer State\",\n    \"commonName\":\"Common Name\",\n    \"applications\":\"Applications\",\n    \"expiryStatus\":\"Expiry Status\",\n    \"type\":\"Type\",\n    \"validTo\":\"Valid To\",\n    \"authorityInfoAccess\":\"Authority Info Access\",\n    \"group\":\"Group\",\n    \"missingParamsForAutoRenew\":\"Missing Params For AutoRenew\",\n    \"issuerCommonName\":\"Issuer Common Name\",\n    \"version\":\"Version\",\n    \"authorityKeyIdentifier\":\"Authority Key Identifier\",\n    \"certificateAuthority\":\"Certificate Authority\",\n    \"complianceStatus\":\"Compliance Status\",\n    \"status\":\"Status\",\n    \"csrAvailable\":\"CSR Available\",\n    \"thumbPrint\":\"ThumbPrint\",\n    \"subjectAlternativeNames\":\"Subject Alternative Names\",\n    \"resourceId\":\"ResourceId\",\n    \"thumbprintAlgorithm\":\"Thumbprint Algorithm\",\n    \"serialNumber\":\"Serial Number\",\n    \"crlDistributionPoints\":\"Crl Distribution Points\",\n    \"signatureAlgorithm\":\"Signature Algorithm\",\n    \"subjectCountry\":\"Subject Country\",\n    \"keyAlgorithmAndSize\":\"Key Algorithm And Size\",\n    \"certificatePolicies\":\"Certificate Policies\",\n    \"associatedObjects\":\"Associated Profiles\",\n    \"suspendedCertificate\":\"Suspended Certificate\",\n    \"permission\":\"Permission\",\n    \"subjectKeyIdentifier\":\"Subject Key Identifier\"\n}\n\ndef get_certs_with_email():\n    \n    email_regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    \n    for cert in certsAssociated:\n        data = {}\n        email_data = {}\n        cert_attrib_email = ''\n        # AVX::LOG(str(selected_fields))\n        \n        for field in selected_fields:\n            if field in cert:\n                if field == 'validTo' or field == 'validFrom':\n                    data[mapping[field]] = datetime.fromtimestamp(int(cert[field])/1000).strftime('%d-%b-%Y')\n                elif field == 'associatedObjects':\n                    assoc_objects = []\n                    for assoc_obj in cert[field]:\n                        assoc_objects.append(assoc_obj.split(\":\")[2])\n                    assoc_objects = ','.join(assoc_objects)\n                    \n                    data[mapping[field]] = assoc_objects\n                else:\n                    data[mapping[field]] = str(cert[field])\n            else:\n                if \"certAttributes\" in cert:\n                    if field in cert[\"certAttributes\"]:\n                        cert_attrib = cert[\"certAttributes\"][field]\n                        # AVX::LOG(str(cert_attrib))\n                        if re.search(email_regex, cert_attrib):\n                            cert_attrib_email = cert_attrib\n                            data[field] = cert_attrib\n                            # AVX::LOG('>>>'+str(cert_attrib_email))\n                        else:\n                            data[field] = cert_attrib\n# ------\n\n        # AVX::LOG(\"Check email:\"+str(check_csr_mail_group))\n        if check_csr_mail_group==\"Yes\":\n            if \"mailAddress\" in cert and cert['mailAddress'] != '':\n                email_data['mail'] = cert['mailAddress']+\",\"+user_provided_email\n                if cert_attrib_email:\n                    email_data['mail'] += \",\"+str(cert_attrib_email)\n            else:\n                email_data['mail'] = user_provided_email\n                if cert_attrib_email:\n                    email_data['mail'] += \",\"+str(cert_attrib_email)\n        else:\n            email_data['mail'] = user_provided_email\n            if cert_attrib_email and user_provided_email:\n                    email_data['mail'] += \",\"+str(cert_attrib_email)\n            elif cert_attrib_email:\n                    email_data['mail'] = str(cert_attrib_email)\n                \n        # AVX::LOG('--->'+str(email_data['mail']))\n                \n        email_data['data'] = data\n        cert_temp_list.append(email_data)\n\ndef group_cert_on_email():\n    temp_dict = defaultdict(list)\n    for cert_data in cert_temp_list:\n        temp_dict[cert_data['mail']].append(cert_data['data'])\n    return temp_dict\n\nif __name__ == '__main__':\n    get_certs_with_email()\n    temp_dict = group_cert_on_email()\n    email_list = temp_dict.keys() if temp_dict.keys() else \"<%enter_email%>\"\n    # for i in temp_dict.items():\n    #     AVX::LOG(i)\n    AVX::OUTPUT({\"date_range_email_list\":list(email_list),\"date_range_temp_dict\":temp_dict})",
    "http_method" : "POST",
    "action_id" : "run-script"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_12",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : null,
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "script_13",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : null,
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "date_range_email_list",
      "value" : "<%date_range_email_list%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "For",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "loopVariables" : {
      "email_id_iter" : "<%date_range_email_list%>"
    },
    "rule" : {
      "not" : false,
      "condition" : "AND",
      "rules" : [ {
        "operator" : "==",
        "value" : "",
        "comparedValue" : ""
      } ]
    },
    "continueOnFailure" : false,
    "joinTaskToReset" : [ ],
    "loopVariableInterceptor" : false,
    "flowIdsToEndLoop" : [ ],
    "_id" : null,
    "task_id" : "startLoop_2",
    "task_name" : "Initializing Email Grouping",
    "task_type" : "loop",
    "task_category" : "startLoop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "loop",
    "group_name" : "General",
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "email_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "join_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "join",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "For",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "loopVariables" : null,
    "rule" : null,
    "continueOnFailure" : false,
    "joinTaskToReset" : [ ],
    "loopVariableInterceptor" : false,
    "flowIdsToEndLoop" : [ ],
    "_id" : null,
    "task_id" : "endLoop_2",
    "task_name" : "Initializing Email Grouping",
    "task_type" : "loop",
    "task_category" : "endLoop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "loop",
    "group_name" : "General",
    "viewable_type" : "default"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "startLoop_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "email_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "email",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "email_id_iter",
      "value" : "<%email_id_iter%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "date_range_temp_dict",
      "value" : "<%date_range_temp_dict%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "valid_from",
      "value" : "<%valid_from%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "full_csv_details",
      "value" : "<%full_csv_details%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "valid_until",
      "value" : "<%valid_until%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_13",
    "task_name" : "Email for date range",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport json\n\nsys.path.insert(0, AVX::DEPENDENCIES)\nsys.path.insert(0, AVX::HELPER)\n\nfrom datetime import datetime\n\n\nemail_id = '<%date_range_email_list[<%email_id_iter%>]%>'\n\ncert_details = '<%date_range_temp_dict%>'\nvalid_from = datetime.fromtimestamp(int('<%valid_from%>')/1000).strftime('%d-%b-%Y')\nvalid_until = datetime.fromtimestamp(int('<%valid_until%>')/1000).strftime('%d-%b-%Y')\n\nfull_csv_details = <%full_csv_details%>\n\nif full_csv_details:\n    full_csv_details.extend(cert_details[email_id])\nelse:\n    full_csv_details = cert_details[email_id]\n\nsubject = \"Notification for Certificates expiring from \"+str(valid_from) +\" to \"+str(valid_until)+\".\" \n\nAVX::OUTPUT({\"subject\":subject,\"email_id\":email_id,\"csv_data\":cert_details[email_id],\"full_csv_details\":full_csv_details})\n\n",
    "http_method" : "POST",
    "action_id" : "run-script"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_13",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "endLoop_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "loop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "email_id",
      "value" : "<%email_id%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "subject",
      "value" : "<%subject%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "csv_data",
      "value" : "<%csv_data%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Email",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "content" : "<html><body><p><span style='font-size:20px;color:#ff6b00;'><strong>app<span style='color:#242424;'>viewX</span></strong></span> <span style='font-size:20px;'><strong>Notification</strong></span></p> <hr /><p style='margin-top:20px;margin-bottom:10px;font-size:15px;'><strong>Request ID:</strong> $requestid | <span><strong>Workflow Name:</strong> $workflowname</span></p><p><br></p><hr/><p><span style='font-size:12px;'>Please do not reply as this is an auto generated email by AppViewX.</span></p> </body></body></html>",
    "subject" : "<%subject%>",
    "to" : {
      "roles" : null,
      "emails" : [ "<%email_id%>" ],
      "user_groups" : null
    },
    "cc" : {
      "roles" : null,
      "emails" : [ "" ],
      "user_groups" : null
    },
    "qcontent" : {
      "ops" : [ {
        "insert" : "\n"
      } ]
    },
    "attachment" : {
      "attachByFiles" : [ ],
      "attachByVariables" : [ {
        "globalVariables" : [ "<%csv_data%>" ],
        "fileType" : "csv",
        "fileName" : "Expiry_cert_details"
      } ]
    },
    "awaitingApproval" : false,
    "autoReply" : false,
    "processBaseURL" : null,
    "_id" : null,
    "task_id" : "email_1",
    "task_name" : "Email",
    "task_type" : "email",
    "task_category" : "email",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "email",
    "group_name" : "Notification",
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "endLoop_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      }, {
        "taskId" : "endLoop_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      }, {
        "taskId" : "decision_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "grid_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "grid",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Join",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "flowIdsToJoin" : [ ],
    "_id" : null,
    "task_id" : "join_2",
    "task_name" : "Join",
    "task_type" : "join",
    "task_category" : "join",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "join",
    "group_name" : "General",
    "viewable_type" : "default"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_10",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : null,
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "script_14",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : null,
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "email_list",
      "value" : "<%email_list%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "For",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "loopVariables" : {
      "iter" : "<%email_list%>"
    },
    "rule" : {
      "not" : false,
      "condition" : "AND",
      "rules" : [ {
        "operator" : "==",
        "value" : "",
        "comparedValue" : ""
      } ]
    },
    "continueOnFailure" : false,
    "joinTaskToReset" : [ ],
    "loopVariableInterceptor" : false,
    "flowIdsToEndLoop" : [ ],
    "_id" : null,
    "task_id" : "startLoop_3",
    "task_name" : "Initializing Email Grouping",
    "task_type" : "loop",
    "task_category" : "startLoop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "loop",
    "group_name" : "General",
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "success" : [ {
        "taskId" : "endLoop_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "loop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "incoming" : [ {
        "taskId" : "join_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "For",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "loopVariables" : null,
    "rule" : null,
    "continueOnFailure" : false,
    "joinTaskToReset" : [ ],
    "loopVariableInterceptor" : false,
    "flowIdsToEndLoop" : [ ],
    "_id" : null,
    "task_id" : "endLoop_3",
    "task_name" : "Initializing Email Grouping",
    "task_type" : "loop",
    "task_category" : "endLoop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "loop",
    "group_name" : "General",
    "viewable_type" : "default"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "startLoop_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "decision_4",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "decision",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "temp_dict",
      "value" : "<%temp_dict%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "full_csv_details",
      "value" : "<%full_csv_details%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "iter",
      "value" : "<%iter%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "day_iter",
      "value" : "<%day_iter%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_14",
    "task_name" : "Email script",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport json\n\nsys.path.insert(0, AVX::DEPENDENCIES)\nsys.path.insert(0, AVX::HELPER)\n\n\nemail_id = '<%email_list[<%iter%>]%>'\n\ncert_details = '<%temp_dict%>'\n\nnotif_day = '<%days_list[<%day_iter%>]%>'\n\nsubject = \"Notification for Certificates expiring within \"+notif_day+' days.'\n\nfull_csv_details = <%full_csv_details%>\n\nif full_csv_details:\n    full_csv_details.extend(cert_details[email_id])\nelse:\n    full_csv_details = cert_details[email_id]\n# AVX::LOG(\"Grid--->\"+str(cert_details[email_id]))\n\nAVX::LOG(\"Before : \"+str(email_id))\n# AVX::LOG(\"TYPE : \"+str(type(email_id)))\n\nemail_id = email_id.strip(\",\")\nAVX::LOG(\"After : \"+str(email_id))\n\nAVX::OUTPUT({\"subject\":subject,\"email_id\":email_id,\"csv_data\":cert_details.get(email_id),\"full_csv_details\":full_csv_details,\"email_len\":len(email_id)})\n\n",
    "http_method" : "POST",
    "action_id" : "run-script"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "decision_4",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "join_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "join",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "email_id",
      "value" : "<%email_id%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "subject",
      "value" : "<%subject%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "csv_data",
      "value" : "<%csv_data%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Email",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "content" : "<html><body><p><span style='font-size:20px;color:#ff6b00;'><strong>app<span style='color:#242424;'>viewX</span></strong></span> <span style='font-size:20px;'><strong>Notification</strong></span></p> <hr /><p style='margin-top:20px;margin-bottom:10px;font-size:15px;'><strong>Request ID:</strong> $requestid | <span><strong>Workflow Name:</strong> $workflowname</span></p><p>Please find attachment of the certificate expiry report.</p><hr/><p><span style='font-size:12px;'>Please do not reply as this is an auto generated email by AppViewX.</span></p> </body></body></html>",
    "subject" : "<%subject%>",
    "to" : {
      "roles" : null,
      "emails" : [ "<%email_id%>" ],
      "user_groups" : null
    },
    "cc" : {
      "roles" : null,
      "emails" : [ "" ],
      "user_groups" : null
    },
    "qcontent" : {
      "ops" : [ {
        "insert" : "Please find attachment of the certificate expiry report.\n"
      } ]
    },
    "attachment" : {
      "attachByFiles" : [ ],
      "attachByVariables" : [ {
        "globalVariables" : [ "<%csv_data%>" ],
        "fileType" : "csv",
        "fileName" : "Expiry_cert_details"
      } ]
    },
    "awaitingApproval" : false,
    "autoReply" : false,
    "processBaseURL" : null,
    "_id" : null,
    "task_id" : "email_2",
    "task_name" : "Email",
    "task_type" : "email",
    "task_category" : "email",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "email",
    "group_name" : "Notification",
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "cert_len_check" : [ {
        "taskId" : "join_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "join",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "incoming" : [ {
        "taskId" : "Certificate_OOB_Form_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "Failed" : [ {
        "taskId" : "decision_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "decision",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "cert_len",
      "value" : "<%cert_len%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "If",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "rule" : {
      "not" : false,
      "condition" : "AND",
      "rules" : [ {
        "operator" : "==",
        "value" : "<%cert_len%>",
        "comparedValue" : "0"
      } ]
    },
    "_id" : null,
    "task_id" : "decision_3",
    "task_name" : "If",
    "task_type" : "decision",
    "task_category" : "decision",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "decision",
    "group_name" : "General",
    "viewable_type" : "custom",
    "rule_name" : "cert_len_check"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "join_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "workflow_stop_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "stop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "full_csv_details",
      "value" : "<%full_csv_details%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "401" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Grid",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "dynamicAuth" : null,
    "regexList" : null,
    "regexOperation" : null,
    "regexPattern" : null,
    "accessMode" : null,
    "proceedProcess" : "Next",
    "breakdownProcess" : "Reject",
    "cancelProcess" : "Cancel",
    "saveDraftProcess" : "Save Draft",
    "closeProcess" : "Exit",
    "enableSaveDraft" : false,
    "enableCancel" : true,
    "enableClose" : false,
    "enableAutoApprove" : true,
    "enableBreakDown" : false,
    "_id" : null,
    "task_id" : "grid_1",
    "task_name" : "Grid",
    "task_type" : "grid",
    "task_category" : "grid",
    "component_type" : "grid",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "grid",
    "group_name" : "User interface",
    "viewable_type" : "custom",
    "aclIdentifiers" : [ {
      "displayName" : "super access",
      "accessMode" : "RW",
      "selected" : true
    } ],
    "gridColumns" : [ {
      "id" : null,
      "label" : "Common Name",
      "value" : "",
      "manualValidation" : false
    }, {
      "id" : null,
      "label" : "Serial Number",
      "value" : "",
      "manualValidation" : false
    }, {
      "id" : null,
      "label" : "Valid From",
      "value" : "",
      "manualValidation" : false
    }, {
      "id" : null,
      "label" : "Valid To",
      "value" : "",
      "manualValidation" : false
    }, {
      "id" : null,
      "label" : "Associated Profiles",
      "value" : "",
      "manualValidation" : false
    }, {
      "id" : null,
      "label" : "Valid For",
      "value" : "",
      "manualValidation" : false
    }, {
      "id" : null,
      "label" : "Expiry Status",
      "value" : "",
      "manualValidation" : false
    }, {
      "id" : null,
      "label" : "Key Algorithm And Size",
      "value" : "",
      "manualValidation" : false
    }, {
      "id" : null,
      "label" : "Signature Hash Algorithm",
      "value" : "",
      "manualValidation" : false
    } ],
    "exportData" : null,
    "editable" : false,
    "gridData" : "<%full_csv_details%>"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "workflow_start_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "decision_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "decision",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "Certificate OOB Form",
    "subFlowID" : "C5zRAPkX",
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : null,
    "parentSubFlowID" : "0LNa9nBd",
    "helpContent" : null,
    "workflowDetail" : null,
    "workflowTaskComponentDetail" : null,
    "_id" : null,
    "task_id" : "Certificate_OOB_Form_1",
    "task_name" : "Certificate OOB Form",
    "task_type" : "flow",
    "task_category" : null,
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "decision_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "Certificate_OOB_VIP_Association_Check_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "flow",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "Certificate OOB Profile Association Check",
    "subFlowID" : "3zLv1ULi",
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : null,
    "parentSubFlowID" : "0LNa9nBd",
    "helpContent" : null,
    "workflowDetail" : null,
    "workflowTaskComponentDetail" : null,
    "_id" : null,
    "task_id" : "Certificate_OOB_Profile_Association_Check_1",
    "task_name" : "Certificate OOB Profile Association Check",
    "task_type" : "flow",
    "task_category" : null,
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "Certificate_OOB_Profile_Association_Check_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "join_1",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "join",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "Certificate OOB VIP Association Check",
    "subFlowID" : "YuTPHFk2",
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : null,
    "parentSubFlowID" : "0LNa9nBd",
    "helpContent" : null,
    "workflowDetail" : null,
    "workflowTaskComponentDetail" : null,
    "_id" : null,
    "task_id" : "Certificate_OOB_VIP_Association_Check_1",
    "task_name" : "Certificate OOB VIP Association Check",
    "task_type" : "flow",
    "task_category" : null,
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "Check_Mail_ID" : [ {
        "taskId" : "join_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "join",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "Failed" : [ {
        "taskId" : "email_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "email",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "incoming" : [ {
        "taskId" : "script_14",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "email_len",
      "value" : "<%email_len%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "If",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "rule" : {
      "not" : false,
      "condition" : "AND",
      "rules" : [ {
        "operator" : "==",
        "value" : "<%email_len%>",
        "comparedValue" : "0"
      } ]
    },
    "_id" : null,
    "task_id" : "decision_4",
    "task_name" : "If",
    "task_type" : "decision",
    "task_category" : "decision",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "decision",
    "group_name" : "General",
    "viewable_type" : "custom",
    "rule_name" : "Check_Mail_ID"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "email_2",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      }, {
        "taskId" : "decision_4",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "endLoop_3",
        "taskName" : null,
        "subflowId" : "0LNa9nBd",
        "parentSubflowId" : "",
        "taskType" : "loop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Join",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "flowIdsToJoin" : [ ],
    "_id" : null,
    "task_id" : "join_3",
    "task_name" : "Join",
    "task_type" : "join",
    "task_category" : "join",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : "join",
    "group_name" : "General",
    "viewable_type" : "default"
  } ],
  "subFlowID" : "0LNa9nBd",
  "taskGlobalData" : {
    "workflow_stop_1" : [ ],
    "decision_1" : [ ],
    "join_1" : [ ],
    "script_9" : [ {
      "name" : "cert_grouping_by_days",
      "key" : "cert_grouping_by_days",
      "value" : "cert_grouping_by_days",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "days_list",
      "key" : "days_list",
      "value" : "days_list",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "startLoop_1" : [ ],
    "endLoop_1" : [ ],
    "script_10" : [ {
      "name" : "email_list",
      "key" : "email_list",
      "value" : "email_list",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "temp_dict",
      "key" : "temp_dict",
      "value" : "temp_dict",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "decision_2" : [ ],
    "script_12" : [ {
      "name" : "date_range_temp_dict",
      "key" : "date_range_temp_dict",
      "value" : "date_range_temp_dict",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "date_range_email_list",
      "key" : "date_range_email_list",
      "value" : "date_range_email_list",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "startLoop_2" : [ ],
    "endLoop_2" : [ ],
    "script_13" : [ {
      "name" : "email_id",
      "key" : "email_id",
      "value" : "email_id",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "subject",
      "key" : "subject",
      "value" : "subject",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "full_csv_details",
      "key" : "full_csv_details",
      "value" : "full_csv_details",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "csv_data",
      "key" : "csv_data",
      "value" : "csv_data",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "email_1" : [ ],
    "join_2" : [ ],
    "startLoop_3" : [ ],
    "endLoop_3" : [ ],
    "script_14" : [ {
      "name" : "email_len",
      "key" : "email_len",
      "value" : "email_len",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "email_id",
      "key" : "email_id",
      "value" : "email_id",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "subject",
      "key" : "subject",
      "value" : "subject",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "full_csv_details",
      "key" : "full_csv_details",
      "value" : "full_csv_details",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "csv_data",
      "key" : "csv_data",
      "value" : "csv_data",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "email_2" : [ ],
    "decision_3" : [ ],
    "generateappviewxcertificate_1" : [ ],
    "grid_1" : [ ],
    "Certificate_OOB_Form_1" : [ ],
    "Certificate_OOB_Profile_Association_Check_1" : [ ],
    "Certificate_OOB_VIP_Association_Check_1" : [ ],
    "decision_4" : [ ],
    "join_3" : [ ]
  },
  "type" : null,
  "level" : 0,
  "maxDepth" : -1,
  "input" : null,
  "workflowName" : "Certificate Expiry Report OOB",
  "description" : null,
  "flowName" : null,
  "workflowType" : "Default",
  "subFlowType" : "Default",
  "parentSubFlowID" : null,
  "logs" : [ ],
  "workflowVersion" : "master"
}, {
  "tasks" : [ {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : { },
    "flowPathID" : null,
    "ignoredForStatusComputation" : true,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "stop",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "rules" : { },
    "cleanUpFlowDetails" : { },
    "subFlowDetails" : [ ],
    "associatedRollbackWorkOrderDetail" : null,
    "_id" : null,
    "task_id" : "workflow_stop_1",
    "task_name" : "Stop",
    "task_type" : "stop",
    "task_category" : "stop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  } ],
  "subFlowID" : "rcXmVb2Z",
  "taskGlobalData" : {
    "workflow_stop_1" : [ ]
  },
  "type" : null,
  "level" : 0,
  "maxDepth" : 0,
  "input" : null,
  "workflowName" : "Certificate Expiry Report OOB",
  "description" : null,
  "flowName" : null,
  "workflowType" : "Rollback",
  "subFlowType" : "Default",
  "parentSubFlowID" : null,
  "logs" : [ ],
  "workflowVersion" : "master"
}, {
  "tasks" : [ {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : true,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "stop",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "rules" : { },
    "cleanUpFlowDetails" : { },
    "subFlowDetails" : [ ],
    "associatedRollbackWorkOrderDetail" : null,
    "_id" : null,
    "task_id" : "workflow_stop_1",
    "task_name" : "Stop flow",
    "task_type" : "stop",
    "task_category" : "stop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "workflow_start_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "script_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Form",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "schedule",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "dynamicAuth" : null,
    "regexList" : null,
    "regexOperation" : null,
    "regexPattern" : null,
    "accessMode" : null,
    "proceedProcess" : "Submit",
    "breakdownProcess" : "Back",
    "cancelProcess" : "Cancel",
    "saveDraftProcess" : "Save Draft",
    "closeProcess" : "Exit",
    "enableSaveDraft" : false,
    "enableCancel" : true,
    "enableClose" : false,
    "enableAutoApprove" : null,
    "enableBreakDown" : false,
    "availableGlobalData" : null,
    "_id" : null,
    "task_id" : "createform_1",
    "task_name" : "Certificate Expiry Check_Form",
    "task_type" : "form",
    "task_category" : "form",
    "component_type" : "form",
    "setNullProperties" : true,
    "folderName" : "Cert+ OOB",
    "sub_group" : "form",
    "group_name" : "User interface",
    "viewable_type" : "default",
    "aclIdentifiers" : null,
    "template" : {
      "name" : "Certificate Expiry Check_Form",
      "description" : null,
      "aclIdentifiers" : null,
      "fields" : [ {
        "labelName" : "Autotrigger",
        "elementType" : "Hidden",
        "values" : "",
        "fieldId" : "autotrigger",
        "fieldScript" : "Get certAttributes",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : true,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : true,
        "global" : false,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Certificate Expiry in days (or) Date range",
        "elementType" : "Radio button",
        "values" : "Date range,Days to expire",
        "fieldId" : "date_range_or_date",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : true,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Number of days to expire",
        "elementType" : "Text box",
        "values" : "",
        "fieldId" : "number_of_days_to_expire",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "date_range_or_date:Days to expire",
        "dataValidation" : "^(\\d+(,\\d+)*)?$",
        "parent" : "",
        "help" : "To enter more than one value, separate them by commas (\",\")\n\nFor example: Entering 30,60,90 will generate 3 reports\n\nReport 1: Certificates expirig in 30 days from now\nReport 2: Certificates expiring between 31 and 60 days from now\nReport 3: Certificates expiring between 61 and 90 days from now \n",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : null,
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Start Date (From)",
        "elementType" : "Date",
        "values" : "",
        "fieldId" : "valid_from",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "date_range_or_date:Date range",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "End Date (To)",
        "elementType" : "Date",
        "values" : "",
        "fieldId" : "valid_until",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "date_range_or_date:Date range",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Ignore orphan certificates",
        "elementType" : "Radio button",
        "values" : "Yes,No",
        "fieldId" : "orphaned_certs",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "Orphan Certificates - Certificates that are not associated to SSL profiles or the SSL profiles not associated to any Virtual Servers",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Enter email ID(s)",
        "elementType" : "Text box",
        "values" : "",
        "fieldId" : "enter_email",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "^(\\s?[^\\s,]+@[^\\s,]+\\.[^\\s,]+\\s?,)*(\\s?[^\\s,]+@[^\\s,]+\\.[^\\s,]+)$",
        "parent" : "",
        "help" : "List of expiring certificates will be sent to this email(s). i.e., ron@appviewx.com,ana@appviewx.com ",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Send Notification to CSR Email ID(s)",
        "elementType" : "Radio button",
        "values" : "Yes,No",
        "fieldId" : "check_csr_mail_group",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "Email will be sent to mail address mentioned in the CSR",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Certificate Attribute",
        "elementType" : "Multi select",
        "values" : "",
        "fieldId" : "certificate_attribute",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "Select an email ID field to send certificate expiry report to their inbox",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Fields for certificate expiry report",
        "elementType" : "Multi select",
        "values" : "Common Name,Serial Number,Valid From,Valid To,Associated Profiles,Key Algorithm And Size,Signature Hash Algorithm,Valid For,Expiry Status",
        "fieldId" : "cert_expiry_form_fields",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : true,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      } ],
      "fieldScripts" : [ {
        "name" : null,
        "description" : null,
        "version" : null,
        "type" : "script",
        "fieldIds" : [ ],
        "responseMapping" : null,
        "historyReferences" : [ ],
        "usedHistory" : null,
        "scriptName" : "Cancel request",
        "scriptData" : "",
        "_id" : null,
        "_keywords" : null
      }, {
        "name" : null,
        "description" : null,
        "version" : null,
        "type" : "script",
        "fieldIds" : [ ],
        "responseMapping" : null,
        "historyReferences" : [ ],
        "usedHistory" : null,
        "scriptName" : "Discard request",
        "scriptData" : "",
        "_id" : null,
        "_keywords" : null
      }, {
        "name" : null,
        "description" : null,
        "version" : null,
        "type" : "script",
        "fieldIds" : [ ],
        "responseMapping" : null,
        "historyReferences" : [ ],
        "usedHistory" : null,
        "scriptName" : "Submit request",
        "scriptData" : "",
        "_id" : null,
        "_keywords" : null
      }, {
        "name" : null,
        "description" : null,
        "version" : null,
        "type" : "script",
        "fieldIds" : [ "certificate_attribute" ],
        "responseMapping" : {
          "response" : {
            "" : ""
          }
        },
        "historyReferences" : [ ],
        "usedHistory" : null,
        "scriptName" : "Get certAttributes",
        "scriptData" : "aW1wb3J0IHN5cwppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJlCmltcG9ydCBqc29uCnN5cy5wYXRoLmluc2VydCgwLEFWWDo6SEVMUEVSKQpzeXMucGF0aC5pbnNlcnQoMCxBVlg6OkRFUEVOREVOQ0lFUykKaW1wb3J0IGFwcHZpZXd4CmltcG9ydCBsb2dnZXJfdXRpbAoKCmxvZ2dlciA9IGxvZ2dlcl91dGlsLmdldF9sb2dnZXIoJ0dldCBDZXJ0QXR0cmlidXRlcycpCgpkZWYgZmV0Y2hfZ2F0ZXdheV9rZXkoKToKICAgICcnJwogICAgZmV0Y2ggdGhlIGdhdGV3YXkga2V5IGZyb20gYXBwdmlld3ggY29uZmlnIGZpbGUKICAgIDpyZXR1cm46IGFwcHZpZXd4IGdhdGV3YXkga2V5CiAgICAnJycKICAgIGNvbmZfY29udGVudCA9IHt9CiAgICBhYnNfcGF0aCA9IG9zLnBhdGguZGlybmFtZShvcy5wYXRoLmFic3BhdGgoX19maWxlX18pKQogICAgIyBsb2dnZXIuaW5mbygnUEFUSCcpCiAgICAjIGxvZ2dlci5pbmZvKGFic19wYXRoKQogICAgcHJvcF9maWxlX3BhdGggPSBhYnNfcGF0aCArICIvLi4vcHJvcGVydGllcy9hcHB2aWV3eC5wcm9wZXJ0aWVzIgogICAgcHJvcF9maWxlID0gb3Blbihwcm9wX2ZpbGVfcGF0aCkKICAgIHByb3BfZmlsZV9saW5lcyA9IHByb3BfZmlsZS5yZWFkbGluZXMoKQogICAgZm9yIGxpbmUgaW4gcHJvcF9maWxlX2xpbmVzOgogICAgICAgIGlmIGxpbmUgaXMgbm90ICJcbiIgYW5kICJHQVRFV0FZX0tFWSIgaW4gbGluZSBvciAiR0FURVdBWV9CQVNFX1VSTCIgaW4gbGluZToKICAgICAgICAgICAgY29uZl9jb250ZW50W2xpbmUuc3BsaXQoIj0iKVswXV0gPSBsaW5lLnNwbGl0KCI9IilbMV0ucmVwbGFjZSgiXG4iLCAiIikKICAgIHJldHVybiBjb25mX2NvbnRlbnRbJ0dBVEVXQVlfQkFTRV9VUkwnXSwgY29uZl9jb250ZW50WydHQVRFV0FZX0tFWSddCiAgICBwcm9wX2ZpbGUuY2xvc2UoKQoKCmRlZiBmZXRjaF9jZXJ0X2F0dHJpYigpOgogICAgIiIiCiAgICBGdW5jdGlvbiB0byBGZXRjaCBDZXJ0QXR0cmlidXRlcyBmcm9tIEFwcFZpZXdYIEludmVudG9yeQogICAgOnJldHVybjogTGlzdCBvZiBDZXJ0QXR0cmlidXRlcwogICAgIiIiCiAgICAKICAgIGdhdGV3YXlfdXJsLCBnYXRld2F5X2tleSA9IGZldGNoX2dhdGV3YXlfa2V5KCkKICAgIAogICAgdXJsID0gIntnYXRld2F5X3VybH1hdnhhcGkvY2VydC1nZW5lcmljLWZpZWxkcy1nZXQtYWxsLWNlcnQtYXR0cmlidXRlcyIuZm9ybWF0KGdhdGV3YXlfdXJsPWdhdGV3YXlfdXJsKQogICAgCiAgICBxdWVyeXN0cmluZyA9IHsiY2F0ZWdvcnkiOiJjZXJ0QXR0cmlidXRlcyIsImd3a2V5IjpnYXRld2F5X2tleSwiZ3dzb3VyY2UiOiJleHRlcm5hbCJ9CiAgICAKICAgIGhlYWRlcnMgPSB7CiAgICAgICAnY29udGVudC10eXBlJzogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgJ3Nlc3Npb25pZCc6ICI8JXNlc3Npb25JZCU+IiwKICAgICAgICdjYWNoZS1jb250cm9sJzogIm5vLWNhY2hlIgogICAgICAgfQogICAgCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLnJlcXVlc3QoIkdFVCIsIHVybCwgaGVhZGVycz1oZWFkZXJzLCBwYXJhbXM9cXVlcnlzdHJpbmcsdmVyaWZ5PUZhbHNlKS5qc29uKCkKICAgIGxvZ2dlci5pbmZvKCJyZXNwb25zZSAtICIrc3RyKHJlc3BvbnNlKSkKICAgIGNlcnRfYXR0cmliX2xpc3Q9IFtdCgogICAgZm9yIHJlcyBpbiByZXNwb25zZVsicmVzcG9uc2UiXToKICAgICAgICBjZXJ0X2F0dHJpYl9saXN0LmFwcGVuZChyZXNbIl9pZCJdKQogICAgCiAgICAKICAgIHJldHVybiBjZXJ0X2F0dHJpYl9saXN0CgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIGNlcnRfYXR0cmliID0gZmV0Y2hfY2VydF9hdHRyaWIoKQogICAgCiAgICBpZiBjZXJ0X2F0dHJpYjoKICAgICAgICBwcmludChqc29uLmR1bXBzKFt7ImNlcnRpZmljYXRlX2F0dHJpYnV0ZSI6dmFsfSBmb3IgdmFsIGluIGNlcnRfYXR0cmliXSkpCiAgICBlbHNlOgogICAgICAgIHByaW50KGpzb24uZHVtcHMoeydlcnJvcic6ICdObyBDZXJ0aWZpY2F0ZSBBdHRyaWJ1dGVzIGZvdW5kJ30pKQoK",
        "_id" : null,
        "_keywords" : null
      } ],
      "accessType" : null,
      "parentTemplate" : null,
      "hiddenTemplate" : false,
      "groupData" : {
        "treeData" : [ ],
        "listData" : [ ]
      },
      "workflow_template_name" : null,
      "_keywords" : null
    },
    "configuration" : {
      "aclIdentifiers" : [ "super access" ],
      "permission" : [ "super access:submit" ],
      "skipFlow" : false,
      "emailConfiguration" : {
        "emailNotificationEnabled" : false,
        "createdNotificationConfig" : {
          "notifyUser" : false,
          "notifyTargetGroup" : false,
          "emailsList" : [ ]
        },
        "reviewedNotificationConfig" : {
          "notifyUser" : false,
          "notifyTargetGroup" : false,
          "emailsList" : [ ]
        },
        "submittedNotificationConfig" : {
          "notifyUser" : false,
          "notifyTargetGroup" : false,
          "emailsList" : [ ]
        },
        "rejectedNotificationConfig" : {
          "notifyUser" : false,
          "notifyTargetGroup" : false,
          "emailsList" : [ ]
        }
      },
      "multipleScenarioEnabled" : false,
      "maxScenarioCount" : 1,
      "enableSaveDraft" : true,
      "enableCancel" : true,
      "enableClose" : false,
      "enableBreakDown" : false,
      "labels" : {
        "submit" : "",
        "reject" : ""
      },
      "enableAutoApprove" : false,
      "failoverState" : 2,
      "successState" : 1,
      "dynamicAuth" : null,
      "regexList" : null,
      "regexOperation" : null,
      "regexPattern" : null,
      "accessMode" : null
    },
    "data" : null,
    "api_list" : null
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "createform_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "workflow_stop_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "stop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "",
    "subFlowID" : "0LNa9nBd",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "valid_from",
      "value" : "<%valid_from%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "number_of_days_to_expire",
      "value" : "<%number_of_days_to_expire%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "certificate_attribute",
      "value" : "<%certificate_attribute%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "date_range_or_date",
      "value" : "<%date_range_or_date%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "sessionId",
      "value" : "<%sessionId%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "valid_until",
      "value" : "<%valid_until%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "cert_expiry_form_fields",
      "value" : "<%cert_expiry_form_fields%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_1",
    "task_name" : "Fetch certs based on expiry date",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : "Cert+ OOB",
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport requests\nimport json\nfrom datetime import timedelta\nfrom datetime import date\nfrom datetime import datetime\n\nsys.path.append(AVX::DEPENDENCIES)\nsys.path.append(AVX::HELPER)\n\nimport appviewx\nimport logger_util\n\nlogger = logger_util.get_logger(\"Cert Expiry\")\nnull = None\ntrue = True\nfalse = False\n\n\n# valid_from,valid_until = timestamp_to_date()\n\n\ndef timestamp_to_date():\n    null = None\n\n    today = date.today()\n    todays_date = today.strftime(\"%d/%m/%Y\")\n    from_to = \"<%date_range_or_date%>\"\n    days_to_expire = \"<%number_of_days_to_expire%>\"\n    if days_to_expire:\n        days_to_expire = days_to_expire.split(\",\")\n        days_to_expire = list(map(int, days_to_expire))\n        days_to_expire.sort()\n        days_to_expire = days_to_expire[-1]\n    valid_from = \"\"\n    valid_until = \"\"\n\n    if from_to == \"Date range\":\n\n        valid_from = \"<%valid_from%>\"\n        valid_from = datetime.fromtimestamp(valid_from / 1000).strftime(\"%d/%m/%Y\")\n        valid_until = \"<%valid_until%>\"\n        valid_until = datetime.fromtimestamp(valid_until / 1000).strftime(\"%d/%m/%Y\")\n        # valid_until = datetime.strptime(str(int(\"<%valid_until%>\")/1000),\"%d/%m/%Y\")\n        AVX::LOG(\"dd/mm/YYYY\")\n        AVX::LOG(\"VALID From : \" + str(valid_from))\n        AVX::LOG(\"VALID To : \" + str(valid_until))\n    else:\n        max_days_to_expire = today + timedelta(days=days_to_expire + 1)\n        max_days_to_expire = max_days_to_expire.strftime(\"%d/%m/%Y\")\n        valid_from = str(todays_date)\n        # valid_from = \"1/1/1970\"\n        AVX::LOG(\"dd/mm/YYYY\")\n        valid_until = str(max_days_to_expire)\n        AVX::LOG(\"VALID From : \" + str(valid_from))\n        AVX::LOG(\"VALID To : \" + str(valid_until))\n    return valid_from, valid_until\n\n\ndef fetch_gateway_key():\n    '''\n    fetch the gateway key from appviewx config file\n    :return: appviewx gateway key\n    '''\n    conf_content = {}\n    abs_path = os.path.dirname(os.path.abspath(__file__))\n    # logger.info('PATH')\n    # logger.info(abs_path)\n    prop_file_path = abs_path + \"/../properties/appviewx.properties\"\n    prop_file = open(prop_file_path)\n    prop_file_lines = prop_file.readlines()\n    for line in prop_file_lines:\n        if line is not \"\\n\" and \"GATEWAY_KEY\" in line or \"GATEWAY_BASE_URL\" in line:\n            conf_content[line.split(\"=\")[0]] = line.split(\"=\")[1].replace(\"\\n\", \"\")\n    return conf_content['GATEWAY_BASE_URL'], conf_content['GATEWAY_KEY']\n    prop_file.close()\n\n\ndef getCertificate(session_id, start, valid_from, valid_until, category):\n    \"\"\"\n    Function to Download Key content from AppViewX Inventory\n    :param session_id: Session Id of AppViewX\n    :param cert_id: uuid of certificate\n    :param file_password: Password of the key file\n    :return: Key Content\n    \"\"\"\n    key = str()\n    gateway_url, gateway_key = fetch_gateway_key()\n    cwd = os.getcwd()\n    url = \"{}avxapi/certificate/search?gwkey={}&gwsource=external\".format(gateway_url, gateway_key)\n    headers = {\"sessionId\": session_id, \"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\n    # payload = {\"payload\":{\"log\": True,\"password\": base64.b64encode(file_password.encode()).decode(),\"uuId\": cert_id}}\n\n    payload = {\"input\": {\"startDate\": valid_from, \"endDate\": valid_until,\"locatorParam\":\"validUntil\", \"category\": category},\n               \"filter\": {\"start\": start, \"max\": 100, \"sortColumn\": \"commonName\", \"sortOrder\": \"asc\"}}\n\n    response = requests.post(url=url, headers=headers, data=json.dumps(payload), verify=False)\n    # logger.info(\"=========CertificateSearch==========\")\n    # AVX::LOG(\"=========CertificateSearch==========\")\n    # logger.info(response.text)\n    # logger.info(response.reason)\n    response = response.json()\n    # return type(response), type(response['response'])\n    logger.info(str(\"---RESPONSE---\"))\n    logger.info(str(response))\n    return response.get(\"response\").get(\"response\").get(\"totalRecords\"), response.get(\"response\").get(\"response\").get(\n        \"objects\"), response.get(\"response\").get(\"response\").get(\"obtainedRecords\")\n\n\ndef form_fields():\n    mapping = {\n        \"Common Name\": \"commonName\",\n        \"Serial Number\": \"serialNumber\",\n        \"Issuer Common Name\": \"issuerCommonName\",\n        \"Status\": \"status\",\n        \"Associated Profiles\": \"associatedObjects\",\n        \"Discovery Sources\": \"discoverySources\",\n        \"Subject Organization\": \"subjectOrganization\",\n        \"Subject Organization Unit\": \"subjectOrganizationUnit\",\n        \"Subject Locality\": \"subjectLocality\",\n        \"Subject State\": \"subjectState\",\n        \"Subject Country\": \"subjectCountry\",\n        \"Issuer Organization\": \"issuerOrganization\",\n        \"Issuer Organization Unit\": \"issuerOrganizationUnit\",\n        \"Issuer Locality\": \"issuerLocality\",\n        \"Issuer State\": \"issuerState\",\n        \"Issuer Country\": \"issuerCountry\",\n        \"Version\": \"version\",\n        \"Valid From\": \"validFrom\",\n        \"Valid To\": 'validTo',\n        \"Valid For\": \"validFor\",\n        \"Key Algorithm And Size\": \"keyAlgorithmAndSize\",\n        \"Signature Algorithm\": \"signatureAlgorithm\",\n        \"Signature Hash Algorithm\": \"signatureHashAlgorithm\",\n        \"Key Usage\": \"keyUsage\",\n        \"Extended Key Usage\": \"extendedKeyUsage\",\n        \"Basic Constraints\": \"basicConstraints\",\n        \"Group\": \"group\",\n        \"Subject Alternative Names\": \"subjectAlternativeNames\",\n        \"Compliance Status\": \"complianceStatus\",\n        \"Applications\": \"applications\",\n        \"Expiry Status\": \"expiryStatus\",\n        \"Permission\": \"permission\",\n        \"Category\": \"category\",\n        \"Certificate Authority\": \"certificateAuthority\",\n        \"Authority Key Identifier\": 'authorityKeyIdentifier',\n        \"Subject Key Identifier\": \"subjectKeyIdentifier\",\n        \"Authority Info Access\": \"authorityInfoAccess\",\n        \"Certificate Policies\": \"certificatePolicies\",\n        \"Crl Distribution Points\": \"crlDistributionPoints\",\n        \"Thumbprint Algorithm\": \"thumbprintAlgorithm\",\n        \"ThumbPrint\": \"thumbPrint\",\n        \"Type\": \"type\",\n        \"Discovered File Names\": \"discoveredFileNames\",\n        \"New Connectors\": \"newConnectors\",\n        \"CSR Available\": \"csrAvailable\",\n        \"Auto RenewDate\": \"autoRenewDate\",\n        \"Missing Params For AutoRenew\": \"missingParamsForAutoRenew\",\n        \"Suspended Certificate\": \"suspendedCertificate\",\n        \"Mail Address\": \"mailAddress\",\n        \"Privatekey Avaliable\": \"privatekeyAvaliable\",\n        \"ResourceId\": \"resourceId\"\n    }\n\n    cert_expiry_form_fields = '<%cert_expiry_form_fields%>'\n    cert_form_fields = cert_expiry_form_fields.split(',')\n    cert_form_fields.extend('<%certificate_attribute%>'.split(\",\"))\n\n    selected_fields = []\n    \n    for fields in cert_form_fields:\n        if mapping.get(fields):\n            selected_fields.append(mapping[fields])\n        else:\n            selected_fields.append(fields)\n    return selected_fields\n\n\nif __name__ == '__main__':\n    selected_fields = form_fields()\n    start = 1\n    all_certs = []\n    valid_from, valid_until = timestamp_to_date()\n    category_types = [\"Server\",\"Client\",\"Device\",\"Code Signing\"]\n\n    # total_records, response, obtainedRecords = getCertificate('<%sessionId%>', start, valid_from, valid_until, \"Server\")\n    # all_certs.extend(response)\n\n    for category in category_types:\n        start = 1\n        total_records, response, obtainedRecords = getCertificate('<%sessionId%>', start, valid_from, valid_until,\n                                                                  category)\n        if obtainedRecords < 100:\n            start = 101\n            all_certs.extend(response)\n        else:\n            while obtainedRecords:\n                if obtainedRecords < 100:\n                    break\n                total_records, response, obtainedRecords = getCertificate('<%sessionId%>', start, valid_from,\n                                                                          valid_until, category)\n                all_certs.extend(response)\n                start += 100\n\n    # AVX::LOG(\"certsAssociated\"+str(all_certs))\n    if all_certs:\n        AVX::LOG(\"No certificates available to process within the given date range\")\n        \n    AVX::OUTPUT({\"certsAssociated\": all_certs, \"cert_len\": len(all_certs), \"selected_fields\": selected_fields,\"full_csv_details\":[]})\n\n",
    "http_method" : "POST",
    "action_id" : "run-script"
  } ],
  "subFlowID" : "FgbihaID",
  "taskGlobalData" : {
    "workflow_stop_1" : [ ],
    "createform_1" : [ {
      "name" : "Send Notification to CSR Email ID(s)",
      "key" : "check_csr_mail_group",
      "value" : "check_csr_mail_group",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "Yes,No",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Start Date (From)",
      "key" : "valid_from",
      "value" : "valid_from",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Number of days to expire",
      "key" : "number_of_days_to_expire",
      "value" : "number_of_days_to_expire",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Ignore orphan certificates",
      "key" : "orphaned_certs",
      "value" : "orphaned_certs",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "Yes,No",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Certificate Attribute",
      "key" : "certificate_attribute",
      "value" : "certificate_attribute",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Certificate Expiry in days (or) Date range",
      "key" : "date_range_or_date",
      "value" : "date_range_or_date",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "Date range,Days to expire",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "End Date (To)",
      "key" : "valid_until",
      "value" : "valid_until",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Fields for certificate expiry report",
      "key" : "cert_expiry_form_fields",
      "value" : "cert_expiry_form_fields",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "Common Name,Serial Number,Valid From,Valid To,Associated Profiles,Key Algorithm And Size,Signature Hash Algorithm,Valid For,Expiry Status",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Enter email ID(s)",
      "key" : "enter_email",
      "value" : "enter_email",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "script_1" : [ {
      "name" : "certsAssociated",
      "key" : "certsAssociated",
      "value" : "certsAssociated",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "cert_len",
      "key" : "cert_len",
      "value" : "cert_len",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "selected_fields",
      "key" : "selected_fields",
      "value" : "selected_fields",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "full_csv_details",
      "key" : "full_csv_details",
      "value" : "full_csv_details",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ]
  },
  "type" : "cart",
  "level" : 0,
  "maxDepth" : 0,
  "input" : null,
  "workflowName" : "Certificate Expiry Report OOB",
  "description" : "",
  "flowName" : "Certificate OOB Form",
  "workflowType" : "Default",
  "subFlowType" : "Flow",
  "parentSubFlowID" : "0LNa9nBd",
  "logs" : [ ],
  "workflowVersion" : "master"
}, {
  "tasks" : [ {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : true,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "stop",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "rules" : { },
    "cleanUpFlowDetails" : { },
    "subFlowDetails" : [ ],
    "associatedRollbackWorkOrderDetail" : null,
    "_id" : null,
    "task_id" : "workflow_stop_1",
    "task_name" : "Stop flow",
    "task_type" : "stop",
    "task_category" : "stop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "workflow_start_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "script_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "script",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : {
      "401" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Form",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "schedule",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "dynamicAuth" : null,
    "regexList" : null,
    "regexOperation" : null,
    "regexPattern" : null,
    "accessMode" : null,
    "proceedProcess" : "Submit",
    "breakdownProcess" : "Back",
    "cancelProcess" : "Cancel",
    "saveDraftProcess" : "Save Draft",
    "closeProcess" : "Exit",
    "enableSaveDraft" : false,
    "enableCancel" : true,
    "enableClose" : false,
    "enableAutoApprove" : null,
    "enableBreakDown" : false,
    "availableGlobalData" : null,
    "_id" : null,
    "task_id" : "createform_1",
    "task_name" : "Certificate Expiry Check Form",
    "task_type" : "form",
    "task_category" : "form",
    "component_type" : "form",
    "setNullProperties" : true,
    "folderName" : "Cert+ OOB",
    "sub_group" : "form",
    "group_name" : "User interface",
    "viewable_type" : "default",
    "aclIdentifiers" : null,
    "template" : {
      "name" : "Certificate Expiry Check Form",
      "description" : null,
      "aclIdentifiers" : null,
      "fields" : [ {
        "labelName" : "Autotrigger",
        "elementType" : "Hidden",
        "values" : "",
        "fieldId" : "autotrigger",
        "fieldScript" : "Get certAttributes",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : true,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : true,
        "global" : false,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Certificate Expiry in days (or) Date range",
        "elementType" : "Radio button",
        "values" : "Date range,Days to expire",
        "fieldId" : "date_range_or_date",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : true,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Number of days to expire",
        "elementType" : "Text box",
        "values" : "",
        "fieldId" : "number_of_days_to_expire",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "date_range_or_date:Days to expire",
        "dataValidation" : "^(\\d+(,\\d+)*)?$",
        "parent" : "",
        "help" : "To enter more than one value, separate them by commas (\",\")\n\nFor example: Entering 30,60,90 will generate 3 reports\n\nReport 1: Certificates expirig in 30 days from now\nReport 2: Certificates expiring between 31 and 60 days from now\nReport 3: Certificates expiring between 61 and 90 days from now \n",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : null,
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Start Date (From)",
        "elementType" : "Date",
        "values" : "",
        "fieldId" : "valid_from",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "date_range_or_date:Date range",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "End Date (To)",
        "elementType" : "Date",
        "values" : "",
        "fieldId" : "valid_until",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "date_range_or_date:Date range",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Certificate Authority",
        "elementType" : "Multi select",
        "values" : "",
        "fieldId" : "certificate_authority",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Ignore orphan certificates",
        "elementType" : "Radio button",
        "values" : "Yes,No",
        "fieldId" : "orphaned_certs",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "Orphan Certificates - Certificates that are not associated to SSL profiles or the SSL profiles not associated to any Virtual Servers",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Enter email ID(s)",
        "elementType" : "Text box",
        "values" : "",
        "fieldId" : "enter_email",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "^(\\s?[^\\s,]+@[^\\s,]+\\.[^\\s,]+\\s?,)*(\\s?[^\\s,]+@[^\\s,]+\\.[^\\s,]+)$",
        "parent" : "",
        "help" : "List of expiring certificates will be sent to this email(s). i.e., ron@appviewx.com,ana@appviewx.com ",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Alert Certificate Owner(s)",
        "elementType" : "Radio button",
        "values" : "Yes,No",
        "fieldId" : "check_csr_mail_group",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "Email(s) will be sent to mail address mentioned in the CSR",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Certificate Attribute",
        "elementType" : "Multi select",
        "values" : "",
        "fieldId" : "certificate_attribute",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : false,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      }, {
        "labelName" : "Fields for certificate expiry report",
        "elementType" : "Multi select",
        "values" : "",
        "fieldId" : "cert_expiry_form_fields",
        "fieldScript" : "",
        "aclFilter" : "None",
        "dependsOn" : "",
        "dataValidation" : "",
        "parent" : "",
        "help" : "",
        "mandatory" : true,
        "predefinedRegex" : false,
        "notification" : null,
        "accessType" : "RW",
        "view" : "advanced",
        "permission" : "submit",
        "group" : "",
        "autoTrigger" : false,
        "global" : true,
        "fileName" : "",
        "downloadType" : null
      } ],
      "fieldScripts" : [ {
        "name" : null,
        "description" : null,
        "version" : null,
        "type" : "script",
        "fieldIds" : [ ],
        "responseMapping" : null,
        "historyReferences" : [ ],
        "usedHistory" : null,
        "scriptName" : "Cancel request",
        "scriptData" : "",
        "_id" : null,
        "_keywords" : null
      }, {
        "name" : null,
        "description" : null,
        "version" : null,
        "type" : "script",
        "fieldIds" : [ ],
        "responseMapping" : null,
        "historyReferences" : [ ],
        "usedHistory" : null,
        "scriptName" : "Discard request",
        "scriptData" : "",
        "_id" : null,
        "_keywords" : null
      }, {
        "name" : null,
        "description" : null,
        "version" : null,
        "type" : "script",
        "fieldIds" : [ ],
        "responseMapping" : null,
        "historyReferences" : [ ],
        "usedHistory" : null,
        "scriptName" : "Submit request",
        "scriptData" : "",
        "_id" : null,
        "_keywords" : null
      }, {
        "name" : null,
        "description" : null,
        "version" : null,
        "type" : "script",
        "fieldIds" : [ "autotrigger" ],
        "responseMapping" : {
          "response" : {
            "" : ""
          }
        },
        "historyReferences" : [ ],
        "usedHistory" : null,
        "scriptName" : "Get certAttributes",
        "scriptData" : "aW1wb3J0IHN5cwppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJlCmltcG9ydCBqc29uCnN5cy5wYXRoLmluc2VydCgwLEFWWDo6SEVMUEVSKQpzeXMucGF0aC5pbnNlcnQoMCxBVlg6OkRFUEVOREVOQ0lFUykKaW1wb3J0IGFwcHZpZXd4CmltcG9ydCBsb2dnZXJfdXRpbAoKCmxvZ2dlciA9IGxvZ2dlcl91dGlsLmdldF9sb2dnZXIoJ0dldCBDZXJ0QXR0cmlidXRlcycpCgpkZWYgZmV0Y2hfZ2F0ZXdheV9rZXkoKToKICAgICcnJwogICAgZmV0Y2ggdGhlIGdhdGV3YXkga2V5IGZyb20gYXBwdmlld3ggY29uZmlnIGZpbGUKICAgIDpyZXR1cm46IGFwcHZpZXd4IGdhdGV3YXkga2V5CiAgICAnJycKICAgIGNvbmZfY29udGVudCA9IHt9CiAgICBhYnNfcGF0aCA9IG9zLnBhdGguZGlybmFtZShvcy5wYXRoLmFic3BhdGgoX19maWxlX18pKQogICAgIyBsb2dnZXIuaW5mbygnUEFUSCcpCiAgICAjIGxvZ2dlci5pbmZvKGFic19wYXRoKQogICAgcHJvcF9maWxlX3BhdGggPSBhYnNfcGF0aCArICIvLi4vcHJvcGVydGllcy9hcHB2aWV3eC5wcm9wZXJ0aWVzIgogICAgcHJvcF9maWxlID0gb3Blbihwcm9wX2ZpbGVfcGF0aCkKICAgIHByb3BfZmlsZV9saW5lcyA9IHByb3BfZmlsZS5yZWFkbGluZXMoKQogICAgZm9yIGxpbmUgaW4gcHJvcF9maWxlX2xpbmVzOgogICAgICAgIGlmIGxpbmUgaXMgbm90ICJcbiIgYW5kICJHQVRFV0FZX0tFWSIgaW4gbGluZSBvciAiR0FURVdBWV9CQVNFX1VSTCIgaW4gbGluZToKICAgICAgICAgICAgY29uZl9jb250ZW50W2xpbmUuc3BsaXQoIj0iKVswXV0gPSBsaW5lLnNwbGl0KCI9IilbMV0ucmVwbGFjZSgiXG4iLCAiIikKICAgIHJldHVybiBjb25mX2NvbnRlbnRbJ0dBVEVXQVlfQkFTRV9VUkwnXSwgY29uZl9jb250ZW50WydHQVRFV0FZX0tFWSddCiAgICBwcm9wX2ZpbGUuY2xvc2UoKQoKCmRlZiBmZXRjaF9jZXJ0X2F0dHJpYigpOgogICAgIiIiCiAgICBGdW5jdGlvbiB0byBGZXRjaCBDZXJ0QXR0cmlidXRlcyBmcm9tIEFwcFZpZXdYIEludmVudG9yeQogICAgOnJldHVybjogTGlzdCBvZiBDZXJ0QXR0cmlidXRlcwogICAgIiIiCiAgICAKICAgIGdhdGV3YXlfdXJsLCBnYXRld2F5X2tleSA9IGZldGNoX2dhdGV3YXlfa2V5KCkKICAgIAogICAgdXJsID0gIntnYXRld2F5X3VybH1hdnhhcGkvY2VydC1nZW5lcmljLWZpZWxkcy1nZXQtYWxsLWNlcnQtYXR0cmlidXRlcyIuZm9ybWF0KGdhdGV3YXlfdXJsPWdhdGV3YXlfdXJsKQogICAgCiAgICBxdWVyeXN0cmluZyA9IHsiY2F0ZWdvcnkiOiJjZXJ0QXR0cmlidXRlcyIsImd3a2V5IjpnYXRld2F5X2tleSwiZ3dzb3VyY2UiOiJleHRlcm5hbCJ9CiAgICAKICAgIGhlYWRlcnMgPSB7CiAgICAgICAnY29udGVudC10eXBlJzogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgJ3Nlc3Npb25pZCc6ICI8JXNlc3Npb25JZCU+IiwKICAgICAgICdjYWNoZS1jb250cm9sJzogIm5vLWNhY2hlIgogICAgICAgfQogICAgCiAgICByZXNwb25zZSA9IHJlcXVlc3RzLnJlcXVlc3QoIkdFVCIsIHVybCwgaGVhZGVycz1oZWFkZXJzLCBwYXJhbXM9cXVlcnlzdHJpbmcsdmVyaWZ5PUZhbHNlKS5qc29uKCkKICAgIGxvZ2dlci5pbmZvKCJyZXNwb25zZSAtICIrc3RyKHJlc3BvbnNlKSkKICAgIGNlcnRfYXR0cmliX2xpc3Q9IFtdCgogICAgZm9yIHJlcyBpbiByZXNwb25zZVsicmVzcG9uc2UiXToKICAgICAgICBjZXJ0X2F0dHJpYl9saXN0LmFwcGVuZChyZXNbIl9pZCJdKQoKICAgIHJldHVybiBjZXJ0X2F0dHJpYl9saXN0CgoKZGVmIGZldGNoX2NlcnRpZmljYXRlX2F1dGhvcml0eSgpOgogICAgIiIiCiAgICBGdW5jdGlvbiB0byBGZXRjaCBDZXJ0QXR0cmlidXRlcyBmcm9tIEFwcFZpZXdYIEludmVudG9yeQogICAgOnJldHVybjogTGlzdCBvZiBDZXJ0QXR0cmlidXRlcwogICAgIiIiCiAgICAKICAgIGdhdGV3YXlfdXJsLCBnYXRld2F5X2tleSA9IGZldGNoX2dhdGV3YXlfa2V5KCkKICAgIAogICAgdXJsID0gIntnYXRld2F5X3VybH1hdnhhcGkvY2VydC1nZXQtcG9saWN5LWJ5LWdyb3VwbmFtZT9jZXJ0aWZpY2F0ZUdyb3VwTmFtZT1EZWZhdWx0JmNlcnRpZmljYXRlQ2F0ZWdvcnk9c2VydmVyIi5mb3JtYXQoZ2F0ZXdheV91cmw9Z2F0ZXdheV91cmwpCiAgICAKICAgIHF1ZXJ5c3RyaW5nID0geyJjYXRlZ29yeSI6ImNlcnRBdHRyaWJ1dGVzIiwiZ3drZXkiOmdhdGV3YXlfa2V5LCJnd3NvdXJjZSI6ImV4dGVybmFsIn0KICAgIAogICAgaGVhZGVycyA9IHsKICAgICAgICdjb250ZW50LXR5cGUnOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAnc2Vzc2lvbmlkJzogIjwlc2Vzc2lvbklkJT4iLAogICAgICAgJ2NhY2hlLWNvbnRyb2wnOiAibm8tY2FjaGUiCiAgICAgICB9CiAgICAKICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucmVxdWVzdCgiR0VUIiwgdXJsLCBoZWFkZXJzPWhlYWRlcnMsIHBhcmFtcz1xdWVyeXN0cmluZyx2ZXJpZnk9RmFsc2UpLmpzb24oKQogICAgbG9nZ2VyLmluZm8oInJlc3BvbnNlIC0gIitzdHIocmVzcG9uc2UpKQogICAgY2VydGlmaWNhdGVfYXV0aG9yaXR5PSBbXQoKICAgIAogICAgaWYgcmVzcG9uc2U6CiAgICAgICAgaWYgcmVzcG9uc2VbInJlc3BvbnNlIl06CiAgICAgICAgICAgIGlmIHJlc3BvbnNlWyJyZXNwb25zZSJdWyJjZXJ0aWZpY2F0ZVBvbGljeUNhQWNjb3VudERldGFpbHMiXToKICAgICAgICAgICAgICAgIGZvciByZXMgaW4gcmVzcG9uc2VbInJlc3BvbnNlIl1bImNlcnRpZmljYXRlUG9saWN5Q2FBY2NvdW50RGV0YWlscyJdOgogICAgICAgICAgICAgICAgICAgIGNlcnRpZmljYXRlX2F1dGhvcml0eS5hcHBlbmQocmVzWyJjZXJ0aWZpY2F0ZUF1dGhvcml0eSJdKQogICAgY2VydGlmaWNhdGVfYXV0aG9yaXR5LmFwcGVuZCgiT1RIRVJTIikKICAgIHJldHVybiBjZXJ0aWZpY2F0ZV9hdXRob3JpdHkKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgY2VydF9hdHRyaWIgPSBmZXRjaF9jZXJ0X2F0dHJpYigpCiAgICAKICAgIGNlcnRpZmljYXRlX2F1dGhvcml0eSA9IGZldGNoX2NlcnRpZmljYXRlX2F1dGhvcml0eSgpCiAgICAKICAgIGNlcnRfZXhwX2Zvcm1fZmllbGRzID0gWydDb21tb24gTmFtZScsICdTZXJpYWwgTnVtYmVyJywgJ1ZhbGlkIEZyb20nLCAnVmFsaWQgVG8nLCAnQ2VydGlmaWNhdGUgQXV0aG9yaXR5JywgJ0Rpc2NvdmVyeSBTb3VyY2VzJywgJ0Fzc29jaWF0ZWQgUHJvZmlsZXMnLCAnVmFsaWQgRm9yJywnS2V5IEFsZ29yaXRobSBBbmQgU2l6ZScsIAogICAgJ0NhdGVnb3J5JywgJ1N1YmplY3QgT3JnYW5pemF0aW9uJywgJ0tleSBVc2FnZScsICdBdXRvIFJlbmV3RGF0ZScsICdOZXcgQ29ubmVjdG9ycycsJ1N1YmplY3QgTG9jYWxpdHknLCAnSXNzdWVyIE9yZ2FuaXphdGlvbicsIAogICAgJ0lzc3VlciBDb3VudHJ5JywgJ1ByaXZhdGVrZXkgQXZhbGlhYmxlJywgJ0V4dGVuZGVkIEtleSBVc2FnZScsJ0lzc3VlciBMb2NhbGl0eScsICdCYXNpYyBDb25zdHJhaW50cycsICdTdWJqZWN0IE9yZ2FuaXphdGlvbiBVbml0JywgCiAgICAnRGlzY292ZXJlZCBGaWxlIE5hbWVzJywgJ1NpZ25hdHVyZSBIYXNoIEFsZ29yaXRobScsICdNYWlsIEFkZHJlc3MnLCAnU3ViamVjdCBTdGF0ZScsICdJc3N1ZXIgT3JnYW5pemF0aW9uIFVuaXQnLCAnSXNzdWVyIFN0YXRlJywgJ0FwcGxpY2F0aW9ucycsCiAgICAnRXhwaXJ5IFN0YXR1cycsICdUeXBlJywgICdBdXRob3JpdHkgSW5mbyBBY2Nlc3MnLCAnR3JvdXAnLCAnTWlzc2luZyBQYXJhbXMgRm9yIEF1dG9SZW5ldycsICdJc3N1ZXIgQ29tbW9uIE5hbWUnLCdWZXJzaW9uJywgJ0F1dGhvcml0eSBLZXkgSWRlbnRpZmllcicsCiAgICAnQ29tcGxpYW5jZSBTdGF0dXMnLCAnU3RhdHVzJywgJ0NTUiBBdmFpbGFibGUnLCAnVGh1bWJQcmludCcsJ1N1YmplY3QgQWx0ZXJuYXRpdmUgTmFtZXMnLCAnVGh1bWJwcmludCBBbGdvcml0aG0nLCAnQ3JsIERpc3RyaWJ1dGlvbiBQb2ludHMnLCAKICAgICdTaWduYXR1cmUgQWxnb3JpdGhtJywnU3ViamVjdCBDb3VudHJ5JywgICdDZXJ0aWZpY2F0ZSBQb2xpY2llcycsICdTdXNwZW5kZWQgQ2VydGlmaWNhdGUnLCdQZXJtaXNzaW9uJywgJ1N1YmplY3QgS2V5IElkZW50aWZpZXInXQogICAgCiAgICAjIGNlcl9leHBfZmllbGRzID0gW3ZhbCBmb3IgdmFsIGluIGNlcnRfZXhwX2Zvcm1fZmllbGRzXQogICAgCiAgICBkYXRhID0gIFt7ImNlcnRpZmljYXRlX2F0dHJpYnV0ZSI6dmFsfSBmb3IgdmFsIGluIGNlcnRfYXR0cmliXSArIFt7ImNlcnRpZmljYXRlX2F1dGhvcml0eSI6dmFsfSBmb3IgdmFsIGluIGNlcnRpZmljYXRlX2F1dGhvcml0eV0gKyAgW3siY2VydF9leHBpcnlfZm9ybV9maWVsZHMiOnZhbH0gZm9yIHZhbCBpbiBjZXJ0X2V4cF9mb3JtX2ZpZWxkc10KICAgICMgZGF0YSA9ICBbeyJjZXJ0X2V4cGlyeV9mb3JtX2ZpZWxkcyI6dmFsfSBmb3IgdmFsIGluIGNlcnRfZXhwX2Zvcm1fZmllbGRzXSArIFt7ImNlcnRpZmljYXRlX2F1dGhvcml0eSI6dmFsMX0gZm9yIHZhbDEgaW4gY2VydGlmaWNhdGVfYXV0aG9yaXR5XQogICAgIyBkYXRhID0gW3siY2VydF9leHBpcnlfZm9ybV9maWVsZHMiOnZhbH0gZm9yIHZhbCBpbiBjZXJ0X2V4cF9mb3JtX2ZpZWxkc10KICAgIGlmIGNlcnRfYXR0cmliOgogICAgICAgIHByaW50KGpzb24uZHVtcHMoZGF0YSkpCiAgICBlbHNlOgogICAgICAgIHByaW50KGpzb24uZHVtcHMoeydlcnJvcic6ICdObyBDZXJ0aWZpY2F0ZSBBdHRyaWJ1dGVzIGZvdW5kJywnZGF0YSc6ZGF0YX0pKQoK",
        "_id" : null,
        "_keywords" : null
      } ],
      "accessType" : null,
      "parentTemplate" : null,
      "hiddenTemplate" : false,
      "groupData" : {
        "treeData" : [ ],
        "listData" : [ ]
      },
      "workflow_template_name" : null,
      "_keywords" : null
    },
    "configuration" : {
      "aclIdentifiers" : [ "super access" ],
      "permission" : [ "super access:submit" ],
      "skipFlow" : false,
      "emailConfiguration" : {
        "emailNotificationEnabled" : false,
        "createdNotificationConfig" : {
          "notifyUser" : false,
          "notifyTargetGroup" : false,
          "emailsList" : [ ]
        },
        "reviewedNotificationConfig" : {
          "notifyUser" : false,
          "notifyTargetGroup" : false,
          "emailsList" : [ ]
        },
        "submittedNotificationConfig" : {
          "notifyUser" : false,
          "notifyTargetGroup" : false,
          "emailsList" : [ ]
        },
        "rejectedNotificationConfig" : {
          "notifyUser" : false,
          "notifyTargetGroup" : false,
          "emailsList" : [ ]
        }
      },
      "multipleScenarioEnabled" : false,
      "maxScenarioCount" : 1,
      "enableSaveDraft" : true,
      "enableCancel" : true,
      "enableClose" : false,
      "enableBreakDown" : false,
      "labels" : {
        "submit" : "",
        "reject" : ""
      },
      "enableAutoApprove" : false,
      "failoverState" : 2,
      "successState" : 1,
      "dynamicAuth" : null,
      "regexList" : null,
      "regexOperation" : null,
      "regexPattern" : null,
      "accessMode" : null
    },
    "data" : null,
    "api_list" : null
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "createform_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "workflow_stop_1",
        "taskName" : null,
        "subflowId" : "FgbihaID",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "stop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "Certificate OOB Form",
    "subFlowID" : "C5zRAPkX",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "valid_from",
      "value" : "<%valid_from%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "number_of_days_to_expire",
      "value" : "<%number_of_days_to_expire%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "certificate_authority",
      "value" : "<%certificate_authority%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "certificate_attribute",
      "value" : "<%certificate_attribute%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "date_range_or_date",
      "value" : "<%date_range_or_date%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "sessionId",
      "value" : "<%sessionId%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "valid_until",
      "value" : "<%valid_until%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "cert_expiry_form_fields",
      "value" : "<%cert_expiry_form_fields%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "0LNa9nBd",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_1",
    "task_name" : "Fetch certs based on expiry date",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : "Cert+ OOB",
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport requests\nimport json\nfrom datetime import timedelta\nfrom datetime import date\nfrom datetime import datetime\n\nsys.path.append(AVX::DEPENDENCIES)\nsys.path.append(AVX::HELPER)\n\nimport appviewx\nimport logger_util\n\nlogger = logger_util.get_logger(\"Cert Expiry\")\nnull = None\ntrue = True\nfalse = False\n\n\ndef timestamp_to_date():\n    '''\n    The function timestamp_to_date converts the timestamp into date format\n    :returns (str): valid from in the following format dd/mm/yyyy\n    :returns (str): valid until in the following format dd/mm/yyyy\n    '''\n    null = None\n    today = date.today()\n    todays_date = today.strftime(\"%d/%m/%Y\")\n    from_to = \"<%date_range_or_date%>\"\n    days_to_expire = \"<%number_of_days_to_expire%>\"\n    if days_to_expire:\n        days_to_expire = days_to_expire.split(\",\")\n        days_to_expire = list(map(int, days_to_expire))\n        days_to_expire.sort()\n        days_to_expire = days_to_expire[-1]\n    valid_from = \"\"\n    valid_until = \"\"\n\n    if from_to == \"Date range\":\n\n        valid_from = \"<%valid_from%>\"\n        valid_from = datetime.fromtimestamp(valid_from / 1000).strftime(\"%d/%m/%Y\")\n        valid_until = \"<%valid_until%>\"\n        valid_until = datetime.fromtimestamp(valid_until / 1000).strftime(\"%d/%m/%Y\")\n        AVX::LOG(\"dd/mm/YYYY\")\n        AVX::LOG(\"VALID From : \" + str(valid_from))\n        AVX::LOG(\"VALID To : \" + str(valid_until))\n    else:\n        max_days_to_expire = today + timedelta(days=days_to_expire + 1)\n        max_days_to_expire = max_days_to_expire.strftime(\"%d/%m/%Y\")\n        valid_from = str(todays_date)\n        # valid_from = \"1/1/1970\"\n        AVX::LOG(\"dd/mm/YYYY\")\n        valid_until = str(max_days_to_expire)\n        AVX::LOG(\"VALID From : \" + str(valid_from))\n        AVX::LOG(\"VALID To : \" + str(valid_until))\n    return valid_from, valid_until\n\n\ndef fetch_gateway_key():\n    '''\n    fetch the gateway key from appviewx config file\n    :return: appviewx gateway key\n    '''\n    conf_content = {}\n    abs_path = os.path.dirname(os.path.abspath(__file__))\n    # logger.info('PATH')\n    # logger.info(abs_path)\n    prop_file_path = abs_path + \"/../properties/appviewx.properties\"\n    prop_file = open(prop_file_path)\n    prop_file_lines = prop_file.readlines()\n    for line in prop_file_lines:\n        if line is not \"\\n\" and \"GATEWAY_KEY\" in line or \"GATEWAY_BASE_URL\" in line:\n            conf_content[line.split(\"=\")[0]] = line.split(\"=\")[1].replace(\"\\n\", \"\")\n    return conf_content['GATEWAY_BASE_URL'], conf_content['GATEWAY_KEY']\n    prop_file.close()\n\n\ndef getCertificate(session_id, start, valid_from, valid_until, category):\n    \"\"\"\n    Function to Download Key content from AppViewX Inventory\n    :param session_id: Session Id of AppViewX\n    :param cert_id: uuid of certificate\n    :param file_password: Password of the key file\n    :return: Key Content\n    \"\"\"\n    key = str()\n    gateway_url, gateway_key = fetch_gateway_key()\n    cwd = os.getcwd()\n    url = \"{}avxapi/certificate/search?gwkey={}&gwsource=external\".format(gateway_url, gateway_key)\n    headers = {\"sessionId\": session_id, \"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\n    payload = {\"input\": {\"startDate\": valid_from, \"endDate\": valid_until,\"locatorParam\":\"validUntil\", \"category\": category},\n               \"filter\": {\"start\": start, \"max\": 100, \"sortColumn\": \"commonName\", \"sortOrder\": \"asc\"}}\n\n    response = requests.post(url=url, headers=headers, data=json.dumps(payload), verify=False)\n    if response.status_code != 200:\n        raise Exception(str(response.reason))\n    \n    response = response.json()\n    logger.info(str(\"---RESPONSE---\"))\n    logger.info(str(response))\n    return response.get(\"response\").get(\"response\").get(\"totalRecords\"), response.get(\"response\").get(\"response\").get(\n        \"objects\"), response.get(\"response\").get(\"response\").get(\"obtainedRecords\")\n\n\ndef form_fields():\n    mapping = {\n        \"Common Name\": \"commonName\",\n        \"Serial Number\": \"serialNumber\",\n        \"Issuer Common Name\": \"issuerCommonName\",\n        \"Status\": \"status\",\n        \"Associated Profiles\": \"associatedObjects\",\n        \"Discovery Sources\": \"discoverySources\",\n        \"Subject Organization\": \"subjectOrganization\",\n        \"Subject Organization Unit\": \"subjectOrganizationUnit\",\n        \"Subject Locality\": \"subjectLocality\",\n        \"Subject State\": \"subjectState\",\n        \"Subject Country\": \"subjectCountry\",\n        \"Issuer Organization\": \"issuerOrganization\",\n        \"Issuer Organization Unit\": \"issuerOrganizationUnit\",\n        \"Issuer Locality\": \"issuerLocality\",\n        \"Issuer State\": \"issuerState\",\n        \"Issuer Country\": \"issuerCountry\",\n        \"Version\": \"version\",\n        \"Valid From\": \"validFrom\",\n        \"Valid To\": 'validTo',\n        \"Valid For\": \"validFor\",\n        \"Key Algorithm And Size\": \"keyAlgorithmAndSize\",\n        \"Signature Algorithm\": \"signatureAlgorithm\",\n        \"Signature Hash Algorithm\": \"signatureHashAlgorithm\",\n        \"Key Usage\": \"keyUsage\",\n        \"Extended Key Usage\": \"extendedKeyUsage\",\n        \"Basic Constraints\": \"basicConstraints\",\n        \"Group\": \"group\",\n        \"Subject Alternative Names\": \"subjectAlternativeNames\",\n        \"Compliance Status\": \"complianceStatus\",\n        \"Applications\": \"applications\",\n        \"Expiry Status\": \"expiryStatus\",\n        \"Permission\": \"permission\",\n        \"Category\": \"category\",\n        \"Certificate Authority\": \"certificateAuthority\",\n        \"Authority Key Identifier\": 'authorityKeyIdentifier',\n        \"Subject Key Identifier\": \"subjectKeyIdentifier\",\n        \"Authority Info Access\": \"authorityInfoAccess\",\n        \"Certificate Policies\": \"certificatePolicies\",\n        \"Crl Distribution Points\": \"crlDistributionPoints\",\n        \"Thumbprint Algorithm\": \"thumbprintAlgorithm\",\n        \"ThumbPrint\": \"thumbPrint\",\n        \"Type\": \"type\",\n        \"Discovered File Names\": \"discoveredFileNames\",\n        \"New Connectors\": \"newConnectors\",\n        \"CSR Available\": \"csrAvailable\",\n        \"Auto RenewDate\": \"autoRenewDate\",\n        \"Missing Params For AutoRenew\": \"missingParamsForAutoRenew\",\n        \"Suspended Certificate\": \"suspendedCertificate\",\n        \"Mail Address\": \"mailAddress\",\n        \"Privatekey Avaliable\": \"privatekeyAvaliable\",\n        \"ResourceId\": \"resourceId\"\n    }\n\n    cert_expiry_form_fields = '<%cert_expiry_form_fields%>'\n    cert_form_fields = cert_expiry_form_fields.split(',')\n    cert_form_fields.extend('<%certificate_attribute%>'.split(\",\"))\n\n    selected_fields = []\n    \n    for fields in cert_form_fields:\n        if mapping.get(fields):\n            selected_fields.append(mapping[fields])\n        else:\n            selected_fields.append(fields)\n    return selected_fields\n\n\nif __name__ == '__main__':\n    selected_fields = form_fields()\n    start = 1\n    all_certs = []\n    valid_from, valid_until = timestamp_to_date()\n    category_types = [\"Server\",\"Client\",\"Device\",\"Code Signing\"]\n\n    for category in category_types:\n        start = 1\n        total_records, response, obtainedRecords = getCertificate('<%sessionId%>', start, valid_from, valid_until,\n                                                                  category)\n        if obtainedRecords < 100:\n            start = 101\n            all_certs.extend(response)\n        else:\n            while obtainedRecords:\n                if obtainedRecords < 100:\n                    break\n                total_records, response, obtainedRecords = getCertificate('<%sessionId%>', start, valid_from,\n                                                                          valid_until, category)\n                all_certs.extend(response)\n                start += 100\n\n    if len(all_certs) == 0:\n        AVX::LOG(\"No certificates available to process within the given date range\")\n    else:\n        certificate_authority = '<%certificate_authority%>'.split(',')\n        if certificate_authority:\n            all_certs = [certificate for certificate in all_certs if certificate.get('certificateAuthority') in certificate_authority]\n        \n    AVX::OUTPUT({\"certsAssociated\": all_certs, \"cert_len\": len(all_certs), \"selected_fields\": selected_fields,\"full_csv_details\":[]})\n\n",
    "http_method" : "POST",
    "action_id" : "run-script"
  } ],
  "subFlowID" : "C5zRAPkX",
  "taskGlobalData" : {
    "workflow_stop_1" : [ ],
    "createform_1" : [ {
      "name" : "Alert Certificate Owner(s)",
      "key" : "check_csr_mail_group",
      "value" : "check_csr_mail_group",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "Yes,No",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Start Date (From)",
      "key" : "valid_from",
      "value" : "valid_from",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Number of days to expire",
      "key" : "number_of_days_to_expire",
      "value" : "number_of_days_to_expire",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Certificate Authority",
      "key" : "certificate_authority",
      "value" : "certificate_authority",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Ignore orphan certificates",
      "key" : "orphaned_certs",
      "value" : "orphaned_certs",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "Yes,No",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Certificate Attribute",
      "key" : "certificate_attribute",
      "value" : "certificate_attribute",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Certificate Expiry in days (or) Date range",
      "key" : "date_range_or_date",
      "value" : "date_range_or_date",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "Date range,Days to expire",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "End Date (To)",
      "key" : "valid_until",
      "value" : "valid_until",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Fields for certificate expiry report",
      "key" : "cert_expiry_form_fields",
      "value" : "cert_expiry_form_fields",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "Enter email ID(s)",
      "key" : "enter_email",
      "value" : "enter_email",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : "",
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "script_1" : [ {
      "name" : "certsAssociated",
      "key" : "certsAssociated",
      "value" : "certsAssociated",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "cert_len",
      "key" : "cert_len",
      "value" : "cert_len",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "selected_fields",
      "key" : "selected_fields",
      "value" : "selected_fields",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "full_csv_details",
      "key" : "full_csv_details",
      "value" : "full_csv_details",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ]
  },
  "type" : null,
  "level" : 1,
  "maxDepth" : 0,
  "input" : null,
  "workflowName" : "Certificate Expiry Report OOB",
  "description" : "",
  "flowName" : "Certificate OOB Form",
  "workflowType" : "Default",
  "subFlowType" : "Flow",
  "parentSubFlowID" : "0LNa9nBd",
  "logs" : [ ],
  "workflowVersion" : "master"
}, {
  "tasks" : [ {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_1",
        "taskName" : null,
        "subflowId" : "H2zzOpZb",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : true,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "stop",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "rules" : { },
    "cleanUpFlowDetails" : { },
    "subFlowDetails" : [ ],
    "associatedRollbackWorkOrderDetail" : null,
    "_id" : null,
    "task_id" : "workflow_stop_1",
    "task_name" : "Stop flow",
    "task_type" : "stop",
    "task_category" : "stop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "I/P parameters - Common Name|Serial Number|Profile Name [List of Common Name|Serial Number|Profile Name ], O/P - List of Associated Profile Certificates",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "workflow_start_1",
        "taskName" : null,
        "subflowId" : "H2zzOpZb",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "workflow_stop_1",
        "taskName" : null,
        "subflowId" : "H2zzOpZb",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "stop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "Certificate_OOB_Profile_Association_Check",
    "subFlowID" : "H2zzOpZb",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "certsAssociated",
      "value" : "<%certsAssociated%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "orphaned_certs",
      "value" : "<%orphaned_certs%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "response",
      "value" : "<%response%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "common_name_ssl_number",
      "value" : "<%common_name_ssl_number%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "sessionId",
      "value" : "<%sessionId%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "0LNa9nBd",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_1",
    "task_name" : "Check Cert Profile-Associations",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : "Cert+ OOB",
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport requests\nimport json\nfrom datetime import timedelta\nfrom datetime import date\nfrom datetime import datetime\n\nsys.path.append(AVX::DEPENDENCIES)\nsys.path.append(AVX::HELPER)\n\nimport appviewx\nimport logger_util\n\nlogger = logger_util.get_logger(\"Cert Expiry\")\nsession_id = '<%sessionId%>'\nnull = None\nfalse = False\ntrue = True\nall_certs = '<%certsAssociated%>'\n\ncommon_name_sl_no_profiles = None\n# common_name_sl_no_profiles = \"exampl.com|08:6A|192.168.41.98::shared:SSL/TLS Profile:Profile-1\"\n# common_name_sl_no_profiles = \"<%common_name_ssl_number%>\"\n\nignore_orphan_certs = '<%orphaned_certs%>'\nif ignore_orphan_certs == \"Yes\":\n    profile_associated = \"No\"\nelif ignore_orphan_certs == \"No\":\n    profile_associated = \"Yes\"\n\ncommon_name = None\nserial_no = None\n# profile_associated = 'Yes'\n\ncert_response = ''''<%response%>'''' # all certificates should be in list of dictionaries\n\nAVX::LOG(\"cert_response\" + str(cert_response))\n\nresponse_json = json.loads(cert_response)\n\ncerts = []\n\n\ndef fetch_gateway_key():\n    '''\n    fetch the gateway key from appviewx config file\n    :return: appviewx gateway key\n    '''\n    conf_content = {}\n    abs_path = os.path.dirname(os.path.abspath(__file__))\n    # logger.info('PATH')\n    # logger.info(abs_path)\n    prop_file_path = abs_path + \"/../properties/appviewx.properties\"\n    prop_file = open(prop_file_path)\n    prop_file_lines = prop_file.readlines()\n    for line in prop_file_lines:\n        if line is not \"\\n\" and \"GATEWAY_KEY\" in line or \"GATEWAY_BASE_URL\" in line:\n            conf_content[line.split(\"=\")[0]] = line.split(\"=\")[1].replace(\"\\n\", \"\")\n    return conf_content['GATEWAY_BASE_URL'], conf_content['GATEWAY_KEY']\n    prop_file.close()\n\n\ndef getCertificate(session_id, start, category):\n    \"\"\"\n    Function to Download Key content from AppViewX Inventory\n    :param session_id: Session Id of AppViewX\n    :param cert_id: uuid of certificate\n    :param file_password: Password of the key file\n    :return: Key Content\n    \"\"\"\n    key = str()\n    gateway_url, gateway_key = fetch_gateway_key()\n    cwd = os.getcwd()\n    url = \"{}avxapi/cert-certificate-inventory-list?gwkey={}&gwsource=external\".format(gateway_url, gateway_key)\n    headers = {\"sessionId\": session_id, \"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\n    # payload = {\"payload\":{\"log\": True,\"password\": base64.b64encode(file_password.encode()).decode(),\"uuId\": cert_id}}\n\n    payload = {\"payload\": {\"skip\": start, \"limit\": 100, \"sort\": {\"_id\": -1}, \"categories\": category}}\n\n    response = requests.post(url=url, headers=headers, data=json.dumps(payload), verify=False)\n    # logger.info(\"=========CertificateSearch==========\")\n    # AVX::LOG(\"=========CertificateSearch==========\")\n    # logger.info(response.text)\n    # logger.info(response.reason)\n    response = response.json()\n    # return type(response), type(response['response'])\n    logger.info(str(\"---RESPONSE---\"))\n    logger.info(str(response))\n    return response.get(\"response\").get(\"totalRecords\"), response.get(\"response\").get(\"data\"), len(\n        response.get(\"response\").get(\"data\"))\n\n\ndef fetch_all_certs_from_inventory(cert):\n    '''\n   fetch all the certificates from the inventory\n   :return: List of certificates and itd information\n   '''\n    if cert == ' ' or not cert:\n        AVX::LOG(\"No certificates are received, so fetching all certificates\")\n        all_certs = []\n\n        category_types = [\"server\", \"device\", \"client\", \"codeSigning\"]\n\n        skip = 0\n\n        obtainedRecords = 100\n\n        while obtainedRecords == 100:\n            total_records, response, obtainedRecords = getCertificate('<%sessionId%>', skip, category_types)\n            certs.extend(response)\n            skip = skip + obtainedRecords\n            if obtainedRecords < 100:\n                break\n\n        if not certs:\n            AVX::LOG(\"No certificates to fetch from the inventory\")\n        logger.info('ALL_CERTS ---> ' + str(certs))\n        return certs\n    else:\n        AVX::LOG(\"Got the certificates from one of the previous paletes\")\n        return cert\n\n\ndef get_not_associated_certs(certs, cn):\n    certificates_list_temp = []\n    for i in range(0, len(certs)):\n        if cn == certs[i]['commmonName']:\n            if (certs[i][\"discoverySources\"]):\n                if not (certs[i][\"associatedObjects\"]):\n                    # count=count+1\n                    certificates_list_temp.append(certs[i])\n    return certificates_list_temp\n\n\ndef get_associated_certs(certs, cn):\n    certificates_list_temp = []\n    for i in range(0, len(certs)):\n        if cn == certs[i]['commmonName']:\n            if (certs[i][\"discoverySources\"]):\n                if (certs[i][\"associatedObjects\"]):\n                    # count=count+1\n                    certificates_list_temp.append(certs[i])\n    return certificates_list_temp\n\n\ndef get_all_not_associated(certs):\n    \"\"\"\n    Fetch the certificates which are not associated to any profile\n    input: all certificates from inventory\n    returns:List of dictionaries with certificates information\n    \"\"\"\n    # AVX::LOG(\"ORPHANcert\")\n    count = 0\n    certificates_list_temp = []\n    for i in range(0, len(certs)):\n        if (certs[i][\"discoverySources\"]):\n            if not (certs[i][\"associatedObjects\"]):\n                count = count + 1\n                certificates_list_temp.append(certs[i])\n    AVX::LOG(\"The number of orphan certificates : \"+str(count))\n                \n    return certificates_list_temp, count\n\n\ndef get_all_associated(certs):\n    \"\"\"\n    Fetch the certificates which are associated to atleast one profile\n    input: all certificates from inventory\n    returns:List of dictionaries with certificates information\n    \"\"\"\n    # AVX::LOG(\"not ORPHAN\")\n    count = 0\n    certificates_list_temp = []\n    for i in range(0, len(certs)):\n        if (certs[i][\"discoverySources\"]):\n            if (certs[i][\"associatedObjects\"]):\n                count = count + 1\n                certificates_list_temp.append(certs[i])\n    AVX::LOG(\"The number of non-orphan certificates : \"+str(count))\n    \n    return certificates_list_temp, count\n\n\ndef get_all_associated_certs_given_input(common_name_serial_no_profiles_list):\n    logger.info(str(type(certs)))\n    logger.info(\"LENGTH--->>>\" + str(len(certs)))\n    logger.info(str(certs))\n    profile_associated_certs = []\n    profile_non_associated_certs = []\n    common_name_serial_no_profiles_list = common_name_serial_no_profiles_list.split(\",\")\n    for common_name_serial_no_profiles in common_name_serial_no_profiles_list:\n        if common_name_serial_no_profiles.count(\"|\") == 2:\n\n            common_name, serial_no, profile = common_name_serial_no_profiles.split(\"|\")[0], \\\n                                              common_name_serial_no_profiles.split(\"|\")[1], \\\n                                              common_name_serial_no_profiles.split(\"|\")[2]\n            for certificate in certs:\n                if certificate.get(\"commonName\") == common_name:\n                    if certificate.get(\"serialNumber\") == serial_no:\n                        AVX::LOG(str(profile))\n                        AVX::LOG(str(certificate.get(\"associatedObjects\")))\n                        if profile in certificate.get(\"associatedObjects\", []):\n                            profile_associated_certs.append(certificate)\n                        else:\n                            profile_non_associated_certs.append(certificate)\n                #     else:\n                #         AVX::LOG(\"The certificate with the given Serial Number is not present in the inventory --->\" + str(serial_no))\n                # else:\n                #     AVX::LOG(\"The certificate with the given Common Name is not present in the inventory --->\" + str(common_name))\n        else:\n            AVX::LOG(\n                \"The Input should be given in the following format: common_name|serial_number|profile_name (or)  common_name1|serial_number1|profile_name1,common_name2|serial_number2|profile_name2... \")\n    return profile_associated_certs, profile_non_associated_certs\n\n\nif __name__ == \"__main__\":\n    certificates_list = []\n\n    if all_certs:\n        certs = fetch_all_certs_from_inventory(all_certs)\n    else:\n        certs = fetch_all_certs_from_inventory(' ')\n    AVX::LOG(str(len(certs)))\n\n    if common_name_sl_no_profiles:\n        associated_certs, non_associated_certs = get_all_associated_certs_given_input(common_name_sl_no_profiles)\n\n    else:\n\n        AVX::LOG(\"ORPHAN CERTS\")\n\n        associated_certs, non_associated_certs = get_all_associated(certs)\n\n        if common_name == None and serial_no == None and profile_associated == 'Yes':\n            certificates_list, count = get_all_not_associated(certs)\n            # AVX::LOG(certificates_list)\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::LOG(\"NON Associated\" + str(count))\n            # AVX::OUTPUT({\"certsAssociated\": certificates_list})\n\n        elif common_name == None and serial_no == None and profile_associated == 'No':\n            certificates_list, count = get_all_associated(certs)\n            # AVX::LOG(certificates_list)\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::LOG(\"Associated\" + str(count))\n            # AVX::OUTPUT({\"certsAssociated\": certificates_list})\n\n\n        elif common_name is not None and profile_associated == 'No':\n            tmp_list = []\n            for cn in comman_name:\n                tmp_list = get_not_associated_certs(certs, cn)\n                if tmp_list:\n                    certificates_list.append(tmp_list)\n            # AVX::LOG(certificates_list)\n            # AVX::OUTPUT({\"certsAssociated\": certificates_list})\n\n        elif common_name is not None and profile_associated == 'Yes':\n            tmp_list = []\n            for cn in comman_name:\n                tmp_list = get_associated_certs(certs, cn)\n                if tmp_list:\n                    certificates_list.append(tmp_list)\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::LOG(certificates_list)\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::OUTPUT({\"certsAssociated\": certificates_list})\n            # ~~~\n            '''\n            certsAssociated ---> Profile associated certs from which we need to identify vip-level orphan cert\n            ssl_orphan_certificates_list  ---> SSL level orphan certificates\n            all_certs --->all the cerrtificates in the inventory\n            '''\n\n        # AVX::LOG(\"All certs\"+str(len(certs)))\n\n        # looger.info(\"COUNT BEFORE ---> \"+str(len(certs)))\n        # for cert in certs:\n        #     if cert in certificates_list:\n        #         certs.remove(cert)\n\n        # AVX::LOG(\"All certs after removal\"+str(len(certs)))\n        # looger.info(\"COUNT AFTER ---> \"+str(len(certs)))\n    #     AVX::LOG(\"ALL CERTS\" + str(len(all_certs)))\n\n    #     AVX::LOG(\"ASSOC CERTS\" + str(len(certificates_list)))\n\n    # AVX::LOG('associated_certs--->' + str(associated_certs))\n    # AVX::LOG('non_associated_certs--->>>' + str(non_associated_certs))\n\n    # AVX::LOG('certificates_list--->>>' + str(certificates_list))\n\n    # associated_certs = certs # certificates after removing orphan certs from the list of all certs\n    AVX::OUTPUT({\"certsAssociated\": certificates_list, \"ssl_orphan_certificates_list\": certificates_list,\n                 \"all_certs\": all_certs, \"associated_certs\": associated_certs,\n                 \"non_associated_certs\": non_associated_certs})\n\n    ",
    "http_method" : "POST",
    "action_id" : "run-script"
  } ],
  "subFlowID" : "H2zzOpZb",
  "taskGlobalData" : {
    "workflow_stop_1" : [ ],
    "script_1" : [ {
      "name" : "all_certs",
      "key" : "all_certs",
      "value" : "all_certs",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "certsAssociated",
      "key" : "certsAssociated",
      "value" : "certsAssociated",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "associated_certs",
      "key" : "associated_certs",
      "value" : "associated_certs",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "non_associated_certs",
      "key" : "non_associated_certs",
      "value" : "non_associated_certs",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "ssl_orphan_certificates_list",
      "key" : "ssl_orphan_certificates_list",
      "value" : "ssl_orphan_certificates_list",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ]
  },
  "type" : "cart",
  "level" : 0,
  "maxDepth" : 0,
  "input" : null,
  "workflowName" : "Certificate Expiry Report OOB",
  "description" : "",
  "flowName" : "Certificate OOB Profile Association Check",
  "workflowType" : "Default",
  "subFlowType" : "Flow",
  "parentSubFlowID" : "0LNa9nBd",
  "logs" : [ ],
  "workflowVersion" : "master"
}, {
  "tasks" : [ {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_1",
        "taskName" : null,
        "subflowId" : "P2XLiXUg",
        "parentSubflowId" : "H2zzOpZb",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : true,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "stop",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "rules" : { },
    "cleanUpFlowDetails" : { },
    "subFlowDetails" : [ ],
    "associatedRollbackWorkOrderDetail" : null,
    "_id" : null,
    "task_id" : "workflow_stop_1",
    "task_name" : "Stop flow",
    "task_type" : "stop",
    "task_category" : "stop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "I/P parameters - Common Name|Serial Number|Profile Name [List of Common Name|Serial Number|Profile Name ], O/P - List of Associated Profile Certificates",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "workflow_start_1",
        "taskName" : null,
        "subflowId" : "P2XLiXUg",
        "parentSubflowId" : "H2zzOpZb",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "workflow_stop_1",
        "taskName" : null,
        "subflowId" : "P2XLiXUg",
        "parentSubflowId" : "H2zzOpZb",
        "taskType" : "stop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "Certificate_OOB_VIP_Association_Check",
    "subFlowID" : "P2XLiXUg",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "all_certs",
      "value" : "<%all_certs%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "certsAssociated",
      "value" : "<%certsAssociated%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "ssl_orphan_certificates_list",
      "value" : "<%ssl_orphan_certificates_list%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "orphaned_certs",
      "value" : "<%orphaned_certs%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "profile_names",
      "value" : "(~profile_names~)",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "sessionId",
      "value" : "<%sessionId%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "common_name",
      "value" : "<%common_name%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "H2zzOpZb",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_1",
    "task_name" : "VIP association check",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : "Cert+ OOB",
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport json\n\nsys.path.append(AVX::DEPENDENCIES)\nsys.path.append(AVX::HELPER)\n\nimport appviewx\nimport logger_util\nimport requests\n\nnull = None\ntrue = True\nfalse = False\n\nlogger = logger_util.get_logger('Profile - VIP Association check')\n\nconn = appviewx.db_connection()\ndb = conn.appviewx\ncommon_name_sl_no_profile_name = '<%common_name%>'\n'''\n    common_name_sl_no_profile_name -> Input in the form of [commonName1|serialNumber1|profileName1, commonName2|serialNumber2|profileName2, ...]\n'''\ncommon_name_sl_no_profile_name = ['localhost.localdomain|12:60:44:10|wom-default-clientssl','localhost.localdomain|12:60:44:10|clientssl']\n\nvs_profiles = []\nssl_associated = '<%certsAssociated%>'\n# ssl_orphan = '<%ssl_orphan_certificates_list%>'\nall_certs = '<%all_certs%>'\nall_certs_for_vip_check = []\nvs_associated = []\ncerts = []\n\ndef fetch_gateway_key():\n    '''\n    fetch the gateway key from appviewx config file\n    :return: appviewx gateway key\n    '''\n    conf_content = {}\n    abs_path = os.path.dirname(os.path.abspath(__file__))\n    # logger.info('PATH')\n    # logger.info(abs_path)\n    prop_file_path = abs_path + \"/../properties/appviewx.properties\"\n    prop_file = open(prop_file_path)\n    prop_file_lines = prop_file.readlines()\n    for line in prop_file_lines:\n        if line is not \"\\n\" and \"GATEWAY_KEY\" in line or \"GATEWAY_BASE_URL\" in line:\n            conf_content[line.split(\"=\")[0]] = line.split(\"=\")[1].replace(\"\\n\", \"\")\n    return conf_content['GATEWAY_BASE_URL'], conf_content['GATEWAY_KEY']\n    prop_file.close()\n\n\ndef getCertificate(session_id, start, category):\n    \"\"\"\n    Function to Download Key content from AppViewX Inventory\n    :param session_id: Session Id of AppViewX\n    :param cert_id: uuid of certificate\n    :param file_password: Password of the key file\n    :return: Key Content\n    \"\"\"\n    key = str()\n    gateway_url, gateway_key = fetch_gateway_key()\n    cwd = os.getcwd()\n    url = \"{}avxapi/cert-certificate-inventory-list?gwkey={}&gwsource=external\".format(gateway_url, gateway_key)\n    headers = {\"sessionId\": session_id, \"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\n    # payload = {\"payload\":{\"log\": True,\"password\": base64.b64encode(file_password.encode()).decode(),\"uuId\": cert_id}}\n\n    payload = {\"payload\": {\"skip\": start, \"limit\": 100, \"sort\": {\"_id\": -1}, \"categories\": category}}\n\n    response = requests.post(url=url, headers=headers, data=json.dumps(payload), verify=False)\n    # logger.info(\"=========CertificateSearch==========\")\n    # AVX::LOG(\"=========CertificateSearch==========\")\n    # logger.info(response.text)\n    # logger.info(response.reason)\n    response = response.json()\n    # return type(response), type(response['response'])\n    logger.info(str(\"---RESPONSE---\"))\n    logger.info(str(response))\n    return response.get(\"response\").get(\"totalRecords\"), response.get(\"response\").get(\"data\"), len(\n        response.get(\"response\").get(\"data\"))\n\n\ndef fetch_all_certs_from_inventory(cert):\n    '''\n   fetch all the certificates from the inventory\n   :return: List of certificates and itd information\n   '''\n    if cert == ' ' or not cert:\n        AVX::LOG(\"No certificates are received, so fetching all certificates\")\n        all_certs = []\n\n        category_types = [\"server\", \"device\", \"client\", \"codeSigning\"]\n\n        # total_records, response, obtainedRecords = getCertificate('<%sessionId%>', start, category_types)\n        # all_certs.extend(response)\n\n        skip = 0\n\n        # total_records, response, obtainedRecords = getCertificate('<%sessionId%>', skip, category)\n        # skip = skip + obtainedRecords\n        # all_certs.extend(response)\n\n        obtainedRecords = 100\n\n        while obtainedRecords == 100:\n            total_records, response, obtainedRecords = getCertificate('<%sessionId%>', skip, category_types)\n            certs.extend(response)\n            skip = skip + obtainedRecords\n            if obtainedRecords < 100:\n                break\n\n        if not certs:\n            AVX::LOG(\"No certificates to fetch from the inventory\")\n        logger.info('ALL_CERTS ---> ' + str(certs))\n        return certs\n    else:\n        AVX::LOG(\"Got the certificates from one of the previous paletes\")\n        # cert_data = json.loads(cert)\n        return cert\n\n\ndef check_all_vip_association(ssl_associated):\n    '''\n    Fetch all the profiles associated to  VIPs\n    '''\n    for cert in ssl_associated:\n        count = 0\n        assoc_objs=''\n        for associatedObj in cert[\"associatedObjects\"]:\n            if len(associatedObj.split(\":\")) > 3:\n                assoc_objs = associatedObj.split(\":\")[2]\n            if assoc_objs in vs_profiles:\n                count = 1\n                break\n            else:\n                pass\n        if count == 1:\n            vs_associated.append(cert)\n    return vs_associated\n\n\ndef fetch_all_vs_profiles():\n    '''\n    Fetch all the distinct profiles from VIPs\n    '''\n    vip_profile_names = (~profile_names~)\n    vip_profile_names = vip_profile_names['data']\n    vs_profile_names = []\n    for profile in vip_profile_names:\n        vs_profile_names.append(profile['name'])\n        \n    all_distinct_profiles = list(set(vs_profile_names))\n    AVX::LOG(str(all_distinct_profiles))\n    AVX::LOG(str(len(all_distinct_profiles)))\n    return all_distinct_profiles\n\n\ndef get_cert_from_common_name(common_name_sl_no_uuid,all_distinct_profiles):\n\n    vip_profile_associated_certs = []\n\n    for cert in common_name_sl_no_uuid:\n        common_name = cert.split('|')[0]\n        sl_no = cert.split('|')[1]\n\n        for cert in all_certs_for_vip_check:\n            if cert.get(\"commonName\") == common_name and cert.get(\"serialNumber\") == sl_no:\n                vip_profile_associated_certs.append(cert)\n\n    return vip_profile_associated_certs\n\n\n\nif __name__ == \"__main__\":\n\n    chosen_cert_list = []\n    vs_profiles = fetch_all_vs_profiles()\n    if ssl_associated:\n        if '<%orphaned_certs%>' == 'Yes':\n            chosen_cert_list = check_all_vip_association(ssl_associated)\n        else:\n            chosen_cert_list = ssl_associated\n    elif common_name_sl_no_profile_name:\n        all_certs_for_vip_check = fetch_all_certs_from_inventory([])\n        all_distinct_profiles = fetch_all_vs_profiles()\n        chosen_cert_list = get_cert_from_common_name(\n            common_name_sl_no_profile_name, all_distinct_profiles)\n        if '<%orphaned_certs%>' == 'Yes':\n            chosen_cert_list = check_all_vip_association(chosen_cert_list)\n    else:\n        chosen_cert_list = fetch_all_certs_from_inventory([])\n        if '<%orphaned_certs%>' == 'Yes':\n            chosen_cert_list = check_all_vip_association(chosen_cert_list)\n        else:\n            chosen_cert_list = chosen_cert_list\n        \n    vip_association = []\n    # AVX::LOG(str(chosen_cert_list))\n    AVX::LOG('The number of certificates that are associated to device : '+str(len(chosen_cert_list)))\n    \n    AVX::OUTPUT({\"certsAssociated\" : chosen_cert_list})",
    "http_method" : "POST",
    "action_id" : "run-script"
  } ],
  "subFlowID" : "P2XLiXUg",
  "taskGlobalData" : {
    "workflow_stop_1" : [ ],
    "script_1" : [ {
      "name" : "certsAssociated",
      "key" : "certsAssociated",
      "value" : "certsAssociated",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ]
  },
  "type" : "cart",
  "level" : 0,
  "maxDepth" : 0,
  "input" : null,
  "workflowName" : "Certificate Expiry Report OOB",
  "description" : "",
  "flowName" : "Certificate OOB VIP Association Check",
  "workflowType" : "Default",
  "subFlowType" : "Flow",
  "parentSubFlowID" : "H2zzOpZb",
  "logs" : [ ],
  "workflowVersion" : "master"
}, {
  "tasks" : [ {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_1",
        "taskName" : null,
        "subflowId" : "H2zzOpZb",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : true,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "stop",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "rules" : { },
    "cleanUpFlowDetails" : { },
    "subFlowDetails" : [ ],
    "associatedRollbackWorkOrderDetail" : null,
    "_id" : null,
    "task_id" : "workflow_stop_1",
    "task_name" : "Stop flow",
    "task_type" : "stop",
    "task_category" : "stop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "I/P parameters - Common Name|Serial Number|Profile Name [List of Common Name|Serial Number|Profile Name ], O/P - List of Associated Profile Certificates",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "workflow_start_1",
        "taskName" : null,
        "subflowId" : "H2zzOpZb",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "workflow_stop_1",
        "taskName" : null,
        "subflowId" : "H2zzOpZb",
        "parentSubflowId" : "0LNa9nBd",
        "taskType" : "stop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "Certificate_OOB_Profile_Association_Check",
    "subFlowID" : "H2zzOpZb",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "certsAssociated",
      "value" : "<%certsAssociated%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "orphaned_certs",
      "value" : "<%orphaned_certs%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "response",
      "value" : "<%response%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "common_name_ssl_number",
      "value" : "<%common_name_ssl_number%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "sessionId",
      "value" : "<%sessionId%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "0LNa9nBd",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_1",
    "task_name" : "Check Cert Profile-Associations",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : "Cert+ OOB",
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport requests\nimport json\nfrom datetime import timedelta\nfrom datetime import date\nfrom datetime import datetime\n\nsys.path.append(AVX::DEPENDENCIES)\nsys.path.append(AVX::HELPER)\n\nimport appviewx\nimport logger_util\n\nlogger = logger_util.get_logger(\"Cert Expiry\")\nsession_id = '<%sessionId%>'\nnull = None\nfalse = False\ntrue = True\nall_certs = '<%certsAssociated%>'\n\ncommon_name_sl_no_profiles = None\n# common_name_sl_no_profiles = \"exampl.com|08:6A|192.168.41.98::shared:SSL/TLS Profile:Profile-1\"\n# common_name_sl_no_profiles = \"<%common_name_ssl_number%>\"\n\nignore_orphan_certs = '<%orphaned_certs%>'\nif ignore_orphan_certs == \"Yes\":\n    profile_associated = \"No\"\nelif ignore_orphan_certs == \"No\":\n    profile_associated = \"Yes\"\n\ncommon_name = None\nserial_no = None\n# profile_associated = 'Yes'\n\ncert_response = ''''<%response%>'''' # all certificates should be in list of dictionaries\n\nAVX::LOG(\"cert_response\" + str(cert_response))\n\nresponse_json = json.loads(cert_response)\n\ncerts = []\n\n\ndef fetch_gateway_key():\n    '''\n    fetch the gateway key from appviewx config file\n    :return: appviewx gateway key\n    '''\n    conf_content = {}\n    abs_path = os.path.dirname(os.path.abspath(__file__))\n    # logger.info('PATH')\n    # logger.info(abs_path)\n    prop_file_path = abs_path + \"/../properties/appviewx.properties\"\n    prop_file = open(prop_file_path)\n    prop_file_lines = prop_file.readlines()\n    for line in prop_file_lines:\n        if line is not \"\\n\" and \"GATEWAY_KEY\" in line or \"GATEWAY_BASE_URL\" in line:\n            conf_content[line.split(\"=\")[0]] = line.split(\"=\")[1].replace(\"\\n\", \"\")\n    return conf_content['GATEWAY_BASE_URL'], conf_content['GATEWAY_KEY']\n    prop_file.close()\n\n\ndef getCertificate(session_id, start, category):\n    \"\"\"\n    Function to Download Key content from AppViewX Inventory\n    :param session_id: Session Id of AppViewX\n    :param cert_id: uuid of certificate\n    :param file_password: Password of the key file\n    :return: Key Content\n    \"\"\"\n    key = str()\n    gateway_url, gateway_key = fetch_gateway_key()\n    cwd = os.getcwd()\n    url = \"{}avxapi/cert-certificate-inventory-list?gwkey={}&gwsource=external\".format(gateway_url, gateway_key)\n    headers = {\"sessionId\": session_id, \"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\n    # payload = {\"payload\":{\"log\": True,\"password\": base64.b64encode(file_password.encode()).decode(),\"uuId\": cert_id}}\n\n    payload = {\"payload\": {\"skip\": start, \"limit\": 100, \"sort\": {\"_id\": -1}, \"categories\": category}}\n\n    response = requests.post(url=url, headers=headers, data=json.dumps(payload), verify=False)\n    # logger.info(\"=========CertificateSearch==========\")\n    # AVX::LOG(\"=========CertificateSearch==========\")\n    # logger.info(response.text)\n    # logger.info(response.reason)\n    response = response.json()\n    # return type(response), type(response['response'])\n    logger.info(str(\"---RESPONSE---\"))\n    logger.info(str(response))\n    return response.get(\"response\").get(\"totalRecords\"), response.get(\"response\").get(\"data\"), len(\n        response.get(\"response\").get(\"data\"))\n\n\ndef fetch_all_certs_from_inventory(cert):\n    '''\n   fetch all the certificates from the inventory\n   :return: List of certificates and itd information\n   '''\n    if cert == ' ' or not cert:\n        AVX::LOG(\"No certificates are received, so fetching all certificates\")\n        all_certs = []\n\n        category_types = [\"server\", \"device\", \"client\", \"codeSigning\"]\n\n        skip = 0\n\n        obtainedRecords = 100\n\n        while obtainedRecords == 100:\n            total_records, response, obtainedRecords = getCertificate('<%sessionId%>', skip, category_types)\n            certs.extend(response)\n            skip = skip + obtainedRecords\n            if obtainedRecords < 100:\n                break\n\n        if not certs:\n            AVX::LOG(\"No certificates to fetch from the inventory\")\n        logger.info('ALL_CERTS ---> ' + str(certs))\n        return certs\n    else:\n        AVX::LOG(\"Got the certificates from one of the previous paletes\")\n        return cert\n\n\ndef get_not_associated_certs(certs, cn):\n    certificates_list_temp = []\n    for i in range(0, len(certs)):\n        if cn == certs[i]['commmonName']:\n            if (certs[i][\"discoverySources\"]):\n                if not (certs[i][\"associatedObjects\"]):\n                    # count=count+1\n                    certificates_list_temp.append(certs[i])\n    return certificates_list_temp\n\n\ndef get_associated_certs(certs, cn):\n    certificates_list_temp = []\n    for i in range(0, len(certs)):\n        if cn == certs[i]['commmonName']:\n            if (certs[i][\"discoverySources\"]):\n                if (certs[i][\"associatedObjects\"]):\n                    # count=count+1\n                    certificates_list_temp.append(certs[i])\n    return certificates_list_temp\n\n\ndef get_all_not_associated(certs):\n    \"\"\"\n    Fetch the certificates which are not associated to any profile\n    input: all certificates from inventory\n    returns:List of dictionaries with certificates information\n    \"\"\"\n    # AVX::LOG(\"ORPHANcert\")\n    count = 0\n    certificates_list_temp = []\n    for i in range(0, len(certs)):\n        if (certs[i][\"discoverySources\"]):\n            if not (certs[i][\"associatedObjects\"]):\n                count = count + 1\n                certificates_list_temp.append(certs[i])\n    AVX::LOG(\"The number of orphan certificates : \"+str(count))\n                \n    return certificates_list_temp, count\n\n\ndef get_all_associated(certs):\n    \"\"\"\n    Fetch the certificates which are associated to atleast one profile\n    input: all certificates from inventory\n    returns:List of dictionaries with certificates information\n    \"\"\"\n    # AVX::LOG(\"not ORPHAN\")\n    count = 0\n    certificates_list_temp = []\n    for i in range(0, len(certs)):\n        if (certs[i][\"discoverySources\"]):\n            if (certs[i][\"associatedObjects\"]):\n                count = count + 1\n                certificates_list_temp.append(certs[i])\n    AVX::LOG(\"The number of non-orphan certificates : \"+str(count))\n    \n    return certificates_list_temp, count\n\n\ndef get_all_associated_certs_given_input(common_name_serial_no_profiles_list):\n    logger.info(str(type(certs)))\n    logger.info(\"LENGTH--->>>\" + str(len(certs)))\n    logger.info(str(certs))\n    profile_associated_certs = []\n    profile_non_associated_certs = []\n    common_name_serial_no_profiles_list = common_name_serial_no_profiles_list.split(\",\")\n    for common_name_serial_no_profiles in common_name_serial_no_profiles_list:\n        if common_name_serial_no_profiles.count(\"|\") == 2:\n\n            common_name, serial_no, profile = common_name_serial_no_profiles.split(\"|\")[0], \\\n                                              common_name_serial_no_profiles.split(\"|\")[1], \\\n                                              common_name_serial_no_profiles.split(\"|\")[2]\n            for certificate in certs:\n                if certificate.get(\"commonName\") == common_name:\n                    if certificate.get(\"serialNumber\") == serial_no:\n                        AVX::LOG(str(profile))\n                        AVX::LOG(str(certificate.get(\"associatedObjects\")))\n                        if profile in certificate.get(\"associatedObjects\", []):\n                            profile_associated_certs.append(certificate)\n                        else:\n                            profile_non_associated_certs.append(certificate)\n                #     else:\n                #         AVX::LOG(\"The certificate with the given Serial Number is not present in the inventory --->\" + str(serial_no))\n                # else:\n                #     AVX::LOG(\"The certificate with the given Common Name is not present in the inventory --->\" + str(common_name))\n        else:\n            AVX::LOG(\n                \"The Input should be given in the following format: common_name|serial_number|profile_name (or)  common_name1|serial_number1|profile_name1,common_name2|serial_number2|profile_name2... \")\n    return profile_associated_certs, profile_non_associated_certs\n\n\nif __name__ == \"__main__\":\n    certificates_list = []\n\n    if all_certs:\n        certs = fetch_all_certs_from_inventory(all_certs)\n    else:\n        certs = fetch_all_certs_from_inventory(' ')\n    AVX::LOG(str(len(certs)))\n\n    if common_name_sl_no_profiles:\n        associated_certs, non_associated_certs = get_all_associated_certs_given_input(common_name_sl_no_profiles)\n\n    else:\n\n        AVX::LOG(\"ORPHAN CERTS\")\n\n        associated_certs, non_associated_certs = get_all_associated(certs)\n\n        if common_name == None and serial_no == None and profile_associated == 'Yes':\n            certificates_list, count = get_all_not_associated(certs)\n            # AVX::LOG(certificates_list)\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::LOG(\"NON Associated\" + str(count))\n            # AVX::OUTPUT({\"certsAssociated\": certificates_list})\n\n        elif common_name == None and serial_no == None and profile_associated == 'No':\n            certificates_list, count = get_all_associated(certs)\n            # AVX::LOG(certificates_list)\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::LOG(\"Associated\" + str(count))\n            # AVX::OUTPUT({\"certsAssociated\": certificates_list})\n\n\n        elif common_name is not None and profile_associated == 'No':\n            tmp_list = []\n            for cn in comman_name:\n                tmp_list = get_not_associated_certs(certs, cn)\n                if tmp_list:\n                    certificates_list.append(tmp_list)\n            # AVX::LOG(certificates_list)\n            # AVX::OUTPUT({\"certsAssociated\": certificates_list})\n\n        elif common_name is not None and profile_associated == 'Yes':\n            tmp_list = []\n            for cn in comman_name:\n                tmp_list = get_associated_certs(certs, cn)\n                if tmp_list:\n                    certificates_list.append(tmp_list)\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::LOG(certificates_list)\n            # AVX::LOG(\"ORPHAN CERTS----------\")\n            # AVX::OUTPUT({\"certsAssociated\": certificates_list})\n            # ~~~\n            '''\n            certsAssociated ---> Profile associated certs from which we need to identify vip-level orphan cert\n            ssl_orphan_certificates_list  ---> SSL level orphan certificates\n            all_certs --->all the cerrtificates in the inventory\n            '''\n\n        # AVX::LOG(\"All certs\"+str(len(certs)))\n\n        # looger.info(\"COUNT BEFORE ---> \"+str(len(certs)))\n        # for cert in certs:\n        #     if cert in certificates_list:\n        #         certs.remove(cert)\n\n        # AVX::LOG(\"All certs after removal\"+str(len(certs)))\n        # looger.info(\"COUNT AFTER ---> \"+str(len(certs)))\n    #     AVX::LOG(\"ALL CERTS\" + str(len(all_certs)))\n\n    #     AVX::LOG(\"ASSOC CERTS\" + str(len(certificates_list)))\n\n    # AVX::LOG('associated_certs--->' + str(associated_certs))\n    # AVX::LOG('non_associated_certs--->>>' + str(non_associated_certs))\n\n    # AVX::LOG('certificates_list--->>>' + str(certificates_list))\n\n    # associated_certs = certs # certificates after removing orphan certs from the list of all certs\n    AVX::OUTPUT({\"certsAssociated\": certificates_list, \"ssl_orphan_certificates_list\": certificates_list,\n                 \"all_certs\": all_certs, \"associated_certs\": associated_certs,\n                 \"non_associated_certs\": non_associated_certs})\n\n    ",
    "http_method" : "POST",
    "action_id" : "run-script"
  } ],
  "subFlowID" : "3zLv1ULi",
  "taskGlobalData" : {
    "workflow_stop_1" : [ ],
    "script_1" : [ {
      "name" : "all_certs",
      "key" : "all_certs",
      "value" : "all_certs",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "certsAssociated",
      "key" : "certsAssociated",
      "value" : "certsAssociated",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "associated_certs",
      "key" : "associated_certs",
      "value" : "associated_certs",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "non_associated_certs",
      "key" : "non_associated_certs",
      "value" : "non_associated_certs",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : "ssl_orphan_certificates_list",
      "key" : "ssl_orphan_certificates_list",
      "value" : "ssl_orphan_certificates_list",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ]
  },
  "type" : null,
  "level" : 1,
  "maxDepth" : 0,
  "input" : null,
  "workflowName" : "Certificate Expiry Report OOB",
  "description" : "",
  "flowName" : "Certificate OOB Profile Association Check",
  "workflowType" : "Default",
  "subFlowType" : "Flow",
  "parentSubFlowID" : "0LNa9nBd",
  "logs" : [ ],
  "workflowVersion" : "master"
}, {
  "tasks" : [ {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : null,
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "script_1",
        "taskName" : null,
        "subflowId" : "P2XLiXUg",
        "parentSubflowId" : "H2zzOpZb",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : true,
    "flowName" : null,
    "subFlowID" : null,
    "globalData" : null,
    "input" : [ ],
    "notificationMessage" : null,
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "stop",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : null,
      "lowCodeTask" : false
    },
    "parentSubFlowID" : null,
    "helpContent" : null,
    "rules" : { },
    "cleanUpFlowDetails" : { },
    "subFlowDetails" : [ ],
    "associatedRollbackWorkOrderDetail" : null,
    "_id" : null,
    "task_id" : "workflow_stop_1",
    "task_name" : "Stop flow",
    "task_type" : "stop",
    "task_category" : "stop",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : null,
    "sub_group" : null,
    "group_name" : null,
    "viewable_type" : "custom"
  }, {
    "uniqueId" : null,
    "directoryUniqueId" : null,
    "source" : null,
    "tags" : [ ],
    "userName" : null,
    "objectType" : "TaskDetails",
    "description" : "I/P parameters - Common Name|Serial Number|Profile Name [List of Common Name|Serial Number|Profile Name ], O/P - List of Associated Profile Certificates",
    "historyReferences" : [ ],
    "usedHistory" : null,
    "sampleInput" : null,
    "sampleOutput" : null,
    "contentTab" : null,
    "successiveTasks" : {
      "incoming" : [ {
        "taskId" : "workflow_start_1",
        "taskName" : null,
        "subflowId" : "P2XLiXUg",
        "parentSubflowId" : "H2zzOpZb",
        "taskType" : "start",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ],
      "success" : [ {
        "taskId" : "workflow_stop_1",
        "taskName" : null,
        "subflowId" : "P2XLiXUg",
        "parentSubflowId" : "H2zzOpZb",
        "taskType" : "stop",
        "flowName" : null,
        "linkType" : null,
        "backwardLink" : false
      } ]
    },
    "flowPathID" : null,
    "ignoredForStatusComputation" : false,
    "flowName" : "Certificate OOB VIP Association Check",
    "subFlowID" : "YuTPHFk2",
    "globalData" : null,
    "input" : [ {
      "name" : null,
      "key" : "all_certs",
      "value" : "<%all_certs%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "certsAssociated",
      "value" : "<%certsAssociated%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "ssl_orphan_certificates_list",
      "value" : "<%ssl_orphan_certificates_list%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "orphaned_certs",
      "value" : "<%orphaned_certs%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "profile_names",
      "value" : "(~profile_names~)",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "sessionId",
      "value" : "<%sessionId%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    }, {
      "name" : null,
      "key" : "common_name",
      "value" : "<%common_name%>",
      "description" : null,
      "dataType" : "Json",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ],
    "notificationMessage" : {
      "0" : "",
      "1" : "",
      "2" : ""
    },
    "ancestor" : null,
    "metaData" : {
      "taskHeader" : "Script",
      "hide" : false,
      "lock" : false,
      "successState" : 1,
      "failoverState" : 2,
      "taskScope" : null,
      "hideFromStageView" : false,
      "mode" : "Developer",
      "nature" : "normal",
      "lowCodeTask" : false
    },
    "parentSubFlowID" : "0LNa9nBd",
    "helpContent" : null,
    "name" : "",
    "syncExecution" : true,
    "_id" : null,
    "task_id" : "script_1",
    "task_name" : "VIP association check",
    "task_type" : "script",
    "task_category" : "script",
    "component_type" : "others",
    "setNullProperties" : true,
    "folderName" : "Cert+ OOB",
    "sub_group" : "script",
    "group_name" : "General",
    "viewable_type" : "custom",
    "scriptType" : "Python",
    "scriptContent" : "import sys\nimport json\n\nsys.path.append(AVX::DEPENDENCIES)\nsys.path.append(AVX::HELPER)\n\nimport appviewx\nimport logger_util\nimport requests\n\nnull = None\ntrue = True\nfalse = False\n\nlogger = logger_util.get_logger('Profile - VIP Association check')\n\nconn = appviewx.db_connection()\ndb = conn.appviewx\ncommon_name_sl_no_profile_name = '<%common_name%>'\n'''\n    common_name_sl_no_profile_name -> Input in the form of [commonName1|serialNumber1|profileName1, commonName2|serialNumber2|profileName2, ...]\n'''\n# common_name_sl_no_profile_name = ['localhost.localdomain|12:60:44:10|wom-default-clientssl','localhost.localdomain|12:60:44:10|clientssl']\n\nvs_profiles = []\nssl_associated = '<%certsAssociated%>'\n# ssl_orphan = '<%ssl_orphan_certificates_list%>'\nall_certs = '<%all_certs%>'\nall_certs_for_vip_check = []\nvs_associated = []\ncerts = []\n\ndef fetch_gateway_key():\n    '''\n    fetch the gateway key from appviewx config file\n    :return: appviewx gateway key\n    '''\n    conf_content = {}\n    abs_path = os.path.dirname(os.path.abspath(__file__))\n    # logger.info('PATH')\n    # logger.info(abs_path)\n    prop_file_path = abs_path + \"/../properties/appviewx.properties\"\n    prop_file = open(prop_file_path)\n    prop_file_lines = prop_file.readlines()\n    for line in prop_file_lines:\n        if line is not \"\\n\" and \"GATEWAY_KEY\" in line or \"GATEWAY_BASE_URL\" in line:\n            conf_content[line.split(\"=\")[0]] = line.split(\"=\")[1].replace(\"\\n\", \"\")\n    return conf_content['GATEWAY_BASE_URL'], conf_content['GATEWAY_KEY']\n    prop_file.close()\n\n\ndef getCertificate(session_id, start, category):\n    \"\"\"\n    Function to Download Key content from AppViewX Inventory\n    :param session_id: Session Id of AppViewX\n    :param cert_id: uuid of certificate\n    :param file_password: Password of the key file\n    :return: Key Content\n    \"\"\"\n    key = str()\n    gateway_url, gateway_key = fetch_gateway_key()\n    cwd = os.getcwd()\n    url = \"{}avxapi/cert-certificate-inventory-list?gwkey={}&gwsource=external\".format(gateway_url, gateway_key)\n    headers = {\"sessionId\": session_id, \"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\n    # payload = {\"payload\":{\"log\": True,\"password\": base64.b64encode(file_password.encode()).decode(),\"uuId\": cert_id}}\n\n    payload = {\"payload\": {\"skip\": start, \"limit\": 100, \"sort\": {\"_id\": -1}, \"categories\": category}}\n\n    response = requests.post(url=url, headers=headers, data=json.dumps(payload), verify=False)\n    # logger.info(\"=========CertificateSearch==========\")\n    # AVX::LOG(\"=========CertificateSearch==========\")\n    # logger.info(response.text)\n    # logger.info(response.reason)\n    response = response.json()\n    # return type(response), type(response['response'])\n    logger.info(str(\"---RESPONSE---\"))\n    logger.info(str(response))\n    return response.get(\"response\").get(\"totalRecords\"), response.get(\"response\").get(\"data\"), len(\n        response.get(\"response\").get(\"data\"))\n\n\ndef fetch_all_certs_from_inventory(cert):\n    '''\n   fetch all the certificates from the inventory\n   :return: List of certificates and itd information\n   '''\n    if cert == ' ' or not cert:\n        AVX::LOG(\"No certificates are received, so fetching all certificates\")\n        all_certs = []\n\n        category_types = [\"server\", \"device\", \"client\", \"codeSigning\"]\n\n        # total_records, response, obtainedRecords = getCertificate('<%sessionId%>', start, category_types)\n        # all_certs.extend(response)\n\n        skip = 0\n\n        # total_records, response, obtainedRecords = getCertificate('<%sessionId%>', skip, category)\n        # skip = skip + obtainedRecords\n        # all_certs.extend(response)\n\n        obtainedRecords = 100\n\n        while obtainedRecords == 100:\n            total_records, response, obtainedRecords = getCertificate('<%sessionId%>', skip, category_types)\n            certs.extend(response)\n            skip = skip + obtainedRecords\n            if obtainedRecords < 100:\n                break\n\n        if not certs:\n            AVX::LOG(\"No certificates to fetch from the inventory\")\n        logger.info('ALL_CERTS ---> ' + str(certs))\n        return certs\n    else:\n        AVX::LOG(\"Got the certificates from one of the previous paletes\")\n        # cert_data = json.loads(cert)\n        return cert\n\n\ndef check_all_vip_association(ssl_associated):\n    '''\n    Fetch all the profiles associated to  VIPs\n    '''\n    for cert in ssl_associated:\n        count = 0\n        assoc_objs=''\n        for associatedObj in cert[\"associatedObjects\"]:\n            if len(associatedObj.split(\":\")) > 3:\n                assoc_objs = associatedObj.split(\":\")[2]\n            if assoc_objs in vs_profiles:\n                count = 1\n                break\n            else:\n                pass\n        if count == 1:\n            vs_associated.append(cert)\n    return vs_associated\n\n\ndef fetch_all_vs_profiles():\n    '''\n    Fetch all the distinct profiles from VIPs using Query explorer by magic variable\n    '''\n    vip_profile_names = (~profile_names~)\n    vip_profile_names = vip_profile_names['data']\n    vs_profile_names = []\n    for profile in vip_profile_names:\n        # vs_profile_names.append(profile.get('profiles'))\n        if profile.get(\"profiles\"):\n            for profile_type in profile.get('profiles'):\n                vs_profile_names.append(profile_type.split(\"/\")[-1])\n        \n    all_distinct_profiles = list(set(vs_profile_names))\n    AVX::LOG(str(all_distinct_profiles))\n    AVX::LOG(str(len(all_distinct_profiles)))\n    return all_distinct_profiles\n\n\ndef get_cert_from_common_name(common_name_sl_no_uuid,all_distinct_profiles):\n\n    vip_profile_associated_certs = []\n\n    for cert in common_name_sl_no_uuid:\n        common_name = cert.split('|')[0]\n        sl_no = cert.split('|')[1]\n\n        for cert in all_certs_for_vip_check:\n            if cert.get(\"commonName\") == common_name and cert.get(\"serialNumber\") == sl_no:\n                vip_profile_associated_certs.append(cert)\n\n    return vip_profile_associated_certs\n\n\n\nif __name__ == \"__main__\":\n\n    chosen_cert_list = []\n    vs_profiles = fetch_all_vs_profiles()\n    if ssl_associated:\n        if '<%orphaned_certs%>' == 'Yes':\n            chosen_cert_list = check_all_vip_association(ssl_associated)\n        else:\n            chosen_cert_list = ssl_associated\n    elif common_name_sl_no_profile_name:\n        all_certs_for_vip_check = fetch_all_certs_from_inventory([])\n        all_distinct_profiles = fetch_all_vs_profiles()\n        chosen_cert_list = get_cert_from_common_name(\n            common_name_sl_no_profile_name, all_distinct_profiles)\n        if '<%orphaned_certs%>' == 'Yes':\n            chosen_cert_list = check_all_vip_association(chosen_cert_list)\n    else:\n        chosen_cert_list = fetch_all_certs_from_inventory([])\n        if '<%orphaned_certs%>' == 'Yes':\n            chosen_cert_list = check_all_vip_association(chosen_cert_list)\n        else:\n            chosen_cert_list = chosen_cert_list\n        \n    vip_association = []\n    # AVX::LOG(str(chosen_cert_list))\n    AVX::LOG('The number of certificates that are associated to device : '+str(len(chosen_cert_list)))\n    \n    AVX::OUTPUT({\"certsAssociated\" : chosen_cert_list})",
    "http_method" : "POST",
    "action_id" : "run-script"
  } ],
  "subFlowID" : "YuTPHFk2",
  "taskGlobalData" : {
    "workflow_stop_1" : [ ],
    "script_1" : [ {
      "name" : "certsAssociated",
      "key" : "certsAssociated",
      "value" : "certsAssociated",
      "description" : null,
      "dataType" : "string",
      "size" : 0,
      "variableType" : "global",
      "defaultValues" : null,
      "mandatory" : false,
      "showToolTip" : false,
      "useDefaultValue" : false,
      "variableDeclared" : false,
      "variableUsed" : false,
      "sourceTasks" : null,
      "destinationTasks" : null,
      "enableForIOVariables" : true,
      "dataValidation" : null,
      "notification" : null,
      "type" : "Custom",
      "_id" : null
    } ]
  },
  "type" : null,
  "level" : 1,
  "maxDepth" : 0,
  "input" : null,
  "workflowName" : "Certificate Expiry Report OOB",
  "description" : "",
  "flowName" : "Certificate OOB VIP Association Check",
  "workflowType" : "Default",
  "subFlowType" : "Flow",
  "parentSubFlowID" : "0LNa9nBd",
  "logs" : [ ],
  "workflowVersion" : "master"
} ]